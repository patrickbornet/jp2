<!DOCTYPE html><!--[if lt IE 7 ]> <html lang="[语言]" class="ie6"> <![endif]--><!--[if IE 7 ]>    <html lang="ja" class="ie7"> <![endif]--><!--[if IE 8 ]>    <html lang="ja" class="ie8"> <![endif]--><!--[if IE 9 ]>    <html lang="ja" class="ie9"> <![endif]--><!--[if (gt IE 9)|!(IE)]><!--> <html lang="ja"> <!--<![endif]--><head><!--[if lte IE 9]><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1;" /><![endif]--><script src="/assets/js/jquery-1.11.1.min.js"></script><meta http-equiv="content-type" content="text/html; charset=utf-8" /><meta name="title" content="[metatags_title]" /><meta name="robots" content="index, follow" /><meta name="author" content="Marimekko" /><meta name="copyright" content="(c)Marimekko 2016" /><meta name="description" content="[metatags_description]" /><meta name="keywords" content="[metatags_keywords]" /><title>[metatags_title]</title><meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"><meta property="og:title" content="Marimekko (マリメッコ) 日本公式オンラインストア"/> <meta property="og:description" content="[metatags_description]"/> <meta property="og:image" content="http://www.marimekko.jp/assets/images/fb_logo.jpg"/> <meta property="og:url" content="http://www.marimekko.jp/news/detail?id=257"/> <meta property="og:site_name" content="Marimekko (マリメッコ) 日本公式オンラインストア"/> <meta property="og:type" content="website"/><!-- HTML5 shim, for IE6-8 support of HTML5 elements --><!--[if lt IE 9]><script src="/assets/bootstrap/js/html5shiv.js"></script><![endif]--><!-- Le styles --><link href="/assets/bootstrap/css/bootstrap.css" rel="stylesheet"><link href="/assets/bootstrap/css/bootstrap-ds2.css" rel="stylesheet"><link href="/assets/boxer-master/jquery.fs.boxer.css" rel="stylesheet"><link href="/assets/flexslider/flexslider.css" rel="stylesheet"><link href="/assets/fancybox/jquery.fancybox.css" rel="stylesheet"><link href="/assets/media/css_secure/7a467a50460dc2c11d075527970e40d1.css" rel="stylesheet"><link href="/assets/bootstrap/css/marimek.css" rel="stylesheet"><link href="/assets/bootstrap/css/item-list.css" rel="stylesheet"><link href="/assets/bootstrap/css/bootstrap-responsive.css" rel="stylesheet" media="screen"><link href="/assets/bootstrap/css/bootstrap-ds2-responsive.css" rel="stylesheet" media="screen"><link href="/assets/bootstrap/css/marimek-responsive.css" rel="stylesheet" media="screen"><link href="/assets/bootstrap/css/marimek-extend.css" rel="stylesheet"><link href="//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" rel="stylesheet"><!-- Fav and touch icons --><link rel="apple-touch-icon-precomposed" href="/assets/images/apple-touch-icon.png"><link rel="icon" href="/favicon.ico" type="image/x-icon" /><link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">    <!-- Google Tag Manager -->  <script>  (function(w,d,s,l,i){    w[l]=w[l]||[];    w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});    var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';    j.async=true;j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);  })  (window,document,'script','dataLayer','GTM-N4N75LD');  </script>  <!-- End Google Tag Manager -->      <!-- Facebook Pixel Code -->  <script>  !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?  n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;  n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;  t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,  document,'script','https://connect.facebook.net/en_US/fbevents.js');  fbq('init', '1742913079328970');  fbq('track', "PageView");</script>  <noscript><img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=1742913079328970&ev=PageView&noscript=1" /></noscript>  <!-- End Facebook Pixel Code --><link rel="stylesheet" type="text/css" media="screen" href="/news/css/style.css" /></head><body class="static display news detail header-info">  <div id="wrapper">      <div id="cta-banner" class="widget widget-banner">      <ul class="cta-banner-inner">               <li id="banner-8">                    [hrefx][hrefx][hrefx]               </li>            </ul>    </div>      <header>      <div id="header" class="clearfix">        <?php// smp menu button ?>        <div id="mobile-nav-toggle">          <span>Menu</span>        </div>        <?php//smp logo ?>        <a href="/" class="logo">          <img src="/assets/skin/frontend/carbon/marimekko/images/logo/mm-logo-black.png" alt="marimekko" />        </a>        <div class="account-actions clearfix">          <div id="atca-cart">            <div class="headercart" id="headercart-disabled">              <a class="headercart-info" href="/cart/index">                <span>ショッピングカート: </span><span class="headercart-items">0</span>              </a>              <div id='addtocart-popup-wrapper' class="dropdown"></div>            </div>          </div>        </div>      </div>    </header>    <?php//PC logo ?>    <div id="desktop-logo" class="black-logo">      <a href="/" class="logo">       <div>        <img src="/assets/skin/frontend/carbon/marimekko/images/logo/mm-logo-black.png" alt="marimekko" />       </div>      </a>    </div>    <div class="content-area" id="page-body">      <nav>        <div id="nav-container">  <div id="nav-wrapper">    <div id="mm-navigation">      <div id="navigation-target">        <div class="mobile-search">          <form id="search_mobile_form" action="/item/search" method="get" ga-event-category="Site Search" class="ga-submit-event">            <div class="input-wrapper">              <button class="flat-button" type="submit">                <span class="icon-search"></span>              </button>              <input id="search-mobile" type="text" name="keyword" value="" class="input-search flat-input" maxlength="128" placeholder="Search" autocomplete="off" />            </div>          </form>        </div>        <ul class="mobile-account-actions clearfix">          <li>                       [hrefx][hrefx][hrefx][hrefx]                     </li>        </ul>        <div class="vertical-nav-container box base-mini block ">          <div id="vertical-nav">                        <div class="vertnav content">                         <ul>                <li class="vertical-nav-item level0 nav-ale odd active">                [hrefx][hrefx][hrefx][hrefx][hrefx]                </li>                                                                                <li class="vertical-nav-item nav-meista mk_newitems nav-1 level0 closed">                  <a class="vertnavlink en" href=""><span class="">新入荷アイテム<span class="expandlink"></span></span></a>                   <ul class="clearfix">                    <li class="vertical-nav-item level1">[hrefx]</li>                     <li class="vertical-nav-item level1">                      [hrefx][hrefx][hrefx][hrefx][hrefx]                     </li>                                                                                                 <li class="vertical-nav-item level2">                              <a class="vertnavlink" href="/item/new_arrival/index/0">                              <span class="alpha_child">2017.07.26(6)</span></a>                            </li>                                                                              <li class="vertical-nav-item level2">                              <a class="vertnavlink" href="/item/new_arrival/index/1">                              <span class="alpha_child">2017.07.21(67)</span></a>                            </li>                                                                              <li class="vertical-nav-item level2">                              <a class="vertnavlink" href="/item/new_arrival/index/2">                              <span class="alpha_child">2017.07.19(14)</span></a>                            </li>                                                                              <li class="vertical-nav-item level2">                              <a class="vertnavlink" href="/item/new_arrival/index/3">                              <span class="alpha_child">2017.07.10(9)</span></a>                            </li>                                                                              <li class="vertical-nav-item level2">                              <a class="vertnavlink" href="/item/new_arrival/index/4">                              <span class="alpha_child">2017.07.07(5)</span></a>                            </li>                                               </ul>                 </li>                                  <li class="vertical-nav-item level0 nav-ale odd ">                [hrefx][hrefx][hrefx][hrefx][hrefx]                </li>                                                                                                                                                                                                              <li class="vertical-nav-item level0 nav-2 parent closed even mk-wear">                      <a class="vertnavlink en" href="/shop/marimekko/item/list/category_id/32"><span>クロージング</span></a>                                              <ul class="clearfix">                         <li class="vertical-nav-item level1 nav-0">[hrefx]</li>                                                                                                            <li class="vertical-nav-item level1 nav-2-1 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/37"><span>コート＆ジャケット</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-2-2 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/39"><span>ニット</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-2-3 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/40"><span>トップス</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-2-4 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/96"><span>シャツ＆ブラウス</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-2-5 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/97"><span>カットソー</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-2-6 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/41"><span>ワンピース</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-2-7 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/43"><span>パンツ</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-2-8 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/42"><span>スカート</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-2-9 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/44"><span>ソックス＆タイツ</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-2-10 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/45"><span>メンズウェア＆ユニセックス</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-2-11 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/46"><span>クラシック</span></a>                                                                                                                  </li>                        </ul>                                           </li>                                                                                                                     <li class="vertical-nav-item level0 nav-3 parent closed odd mk-acc">                      <a class="vertnavlink en" href="/shop/marimekko/item/list/category_id/33"><span>アクセサリー</span></a>                                              <ul class="clearfix">                         <li class="vertical-nav-item level1 nav-0">[hrefx][hrefx][hrefx][hrefx]</li>                                                                                                            <li class="vertical-nav-item level1 nav-3-1 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/47"><span>スカーフ</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-3-2 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/48"><span>ベルト</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-3-3 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/49"><span>アンブレラ</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-3-4 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/84"><span>アイウェア</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-3-5 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/85"><span>シューズ</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-3-6 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/120"><span>ジュエリー</span></a>                                                                                                                  </li>                        </ul>                                           </li>                                                                                                                     <li class="vertical-nav-item level0 nav-4 parent closed even mk-bag">                      <a class="vertnavlink en" href="/shop/marimekko/item/list/category_id/34"><span>バッグ</span></a>                                              <ul class="clearfix">                         <li class="vertical-nav-item level1 nav-0">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                                                                                                            <li class="vertical-nav-item level1 nav-4-1 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/50"><span>ショルダーバッグ</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-4-2 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/51"><span>トートバッグ</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-4-3 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/52"><span>バックパック</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-4-4 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/53"><span>クラッチバッグ</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-4-5 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/54"><span>パース&ウォレット</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-4-6 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/55"><span>ポーチ</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-4-7 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/56"><span>クラシック</span></a>                                                                                                                  </li>                        </ul>                                           </li>                                                                                                                     <li class="vertical-nav-item level0 nav-5 parent closed odd mk-kids">                      <a class="vertnavlink en" href="/shop/marimekko/item/list/category_id/121"><span>キッズ</span></a>                                           </li>                                                                                                                     <li class="vertical-nav-item level0 nav-6 parent closed even mk-home">                      <a class="vertnavlink en" href="/shop/marimekko/item/list/category_id/35"><span>ホーム</span></a>                                              <ul class="clearfix">                         <li class="vertical-nav-item level1 nav-0">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                                                                                                            <li class="vertical-nav-item level1 nav-6-1 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/57"><span>キッチン&ダイニング</span></a>                                                              <ul class="clearfix child-category">                                 <li class="vertical-nav-item level1 first nav-0 ">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                                                                                                                                            <li class="vertical-nav-item level1 nav-6-1-1 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/63"><span>カップ＆マグ</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-2 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/82"><span>ボウル＆プレート</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-3 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/71"><span>カトラリー</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-4 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/64"><span>ティーポット</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-5 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/65"><span>ジャグ&ピッチャー</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-6 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/66"><span>トレイ&プレイスマット</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-7 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/67"><span>エプロン</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-8 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/68"><span>ミトン&ポットホルダー</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-9 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/69"><span>ティータオル</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-10 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/70"><span>テーブルクロス</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-11 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/98"><span>その他</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-1-12 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/124"><span>ペーパーナプキン</span></a>                                    </li>                                                                   </ul>                                                                                                                                                  <li class="vertical-nav-item level1 nav-6-2 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/58"><span>リビング&デコレーティング</span></a>                                                              <ul class="clearfix child-category">                                 <li class="vertical-nav-item level1 first nav-0 ">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                                                                                                                                            <li class="vertical-nav-item level1 nav-6-2-1 even">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/72"><span>クッション</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-2-2 even">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/73"><span>ブランケット</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-2-3 even">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/74"><span>ベース&ランプ</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-2-4 even">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/75"><span>ステーショナリー</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-2-5 even">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/76"><span>その他</span></a>                                    </li>                                                                   </ul>                                                                                                                                                  <li class="vertical-nav-item level1 nav-6-3 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/59"><span>ベッド&バス</span></a>                                                              <ul class="clearfix child-category">                                 <li class="vertical-nav-item level1 first nav-0 ">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                                                                                                                                            <li class="vertical-nav-item level1 nav-6-3-1 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/77"><span>ベッドリネン</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-3-2 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/78"><span>タオル</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-3-3 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/80"><span>シャワーカーテン</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-6-3-4 odd">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/79"><span>バスマット</span></a>                                    </li>                                                                   </ul>                                                                                                                    </li>                        </ul>                                           </li>                                                                                                                     <li class="vertical-nav-item level0 nav-7 parent closed odd mk-fabric">                      <a class="vertnavlink en" href="/shop/marimekko/item/list/category_id/36"><span>ファブリック</span></a>                                              <ul class="clearfix">                         <li class="vertical-nav-item level1 nav-0">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                                                                                                            <li class="vertical-nav-item level1 nav-7-1 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/60"><span>クラシック</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-7-2 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/61"><span>シーズン</span></a>                                                              <ul class="clearfix child-category">                                 <li class="vertical-nav-item level1 first nav-0 ">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                                                                                                                                            <li class="vertical-nav-item level1 nav-7-2-1 even">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/99"><span>Fall/Winter 2016</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-7-2-2 even">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/100"><span>Spring/Summer 2016</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-7-2-3 even">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/136"><span>Spring/Summer 2017</span></a>                                    </li>                                                                                                          <li class="vertical-nav-item level1 nav-7-2-4 even">                                      <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/138"><span>Fall/Winter 2017</span></a>                                    </li>                                                                   </ul>                                                                                                                                                  <li class="vertical-nav-item level1 nav-7-3 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/123"><span>限定</span></a>                                                                                                                  </li>                        </ul>                                           </li>                                                                                                                                                                                                                                                                                                                                                            <li class="vertical-nav-item level0 nav-11 parent closed odd m-gift">                      <a class="vertnavlink en" href="/shop/marimekko/item/list/category_id/129"><span>ギフト特集</span></a>                                              <ul class="clearfix">                         <li class="vertical-nav-item level1 nav-0">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                                                                                                            <li class="vertical-nav-item level1 nav-11-1 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/130"><span>Under 3000 yen</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-11-2 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/131"><span>Mother's Day Gift Ideas</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-11-3 odd closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/132"><span>Father's Day Gift Ideas</span></a>                                                                                                                                                <li class="vertical-nav-item level1 nav-11-4 even closed">                              <a class="vertnavlink" href="/shop/marimekko/item/list/category_id/133"><span>For Kids & Baby</span></a>                                                                                                                  </li>                        </ul>                                           </li>                                                                                         <li class="vertical-nav-item level0 nav-meista even parent nav-9 closed">                  <a class="vertnavlink" href="/the-brand"><span>Marimekko's World<span class="expandlink"></span></span></a>                  <a class="showall" href="/the-brand">全て見る</a>                  <ul class="clearfix child-category">                                                 <li class="vertical-nav-item level1 odd nav-9-2 ">                  [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]                </li>                                    <li class="vertical-nav-item level1 nav-marimekon-tarina odd nav-9-2 ">                    <a class="vertnavlink" href="/the-brand/marimekko-story"><span>マリメッコ・ストーリー</span></a>                  </li>                     <li class="vertical-nav-item level1 odd nav-9-2 ">                  <a  class="vertnavlink" href="/sp/helsinki/"><span>ヘルシンキのプリント工場</span></a>                </li>                                 <li class="vertical-nav-item level1 nav-suunnittelijat even parent nav-9-3 closed">                    <a class="vertnavlink" href="/the-brand/designers"><span>デザイナー<span class="expandlink"></span></span></a>                    <a class="showall" href="/the-brand/designers">全て見る</a>                    <ul class="clearfix">                      <li class="vertical-nav-item level2 nav-aino-maija-metsola odd nav-9-3-2 ">                        <a class="vertnavlink" href="/the-brand/designers/aino-maija-metsola"><span>アイノ-マイヤ・メッツォラ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-anu-penttinen odd nav-9-3-6 ">                        <a class="vertnavlink" href="/the-brand/designers/anu-penttinen"><span>アヌ・ペンッティネン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-armi-ratia even first nav-9-3-1 ">                        <a class="vertnavlink" href="/the-brand/designers/armi-ratia"><span>アルミ・ラティア</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-anna-danielsson odd nav-9-3-4 ">                        <a class="vertnavlink" href="/the-brand/designers/anna-danielsson"><span>アンナ・ダニエルソン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-anna-werner even nav-9-3-5 ">                        <a class="vertnavlink" href="/the-brand/designers/anna-werner"><span>アンナ・ワーナー</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-annika-rimala even nav-9-3-3 ">                        <a class="vertnavlink" href="/the-brand/designers/annika-rimala"><span>アンニカ・リマラ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-jenni-tuominen odd nav-9-3-12 ">                        <a class="vertnavlink" href="/the-brand/designers/jenni-tuominen"><span>イェンニ・トゥオミネン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-jenni-rope even nav-9-3-11 ">                        <a class="vertnavlink" href="/the-brand/designers/jenni-rope"><span>イェンニ・ロペ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-fujiwo-ishimoto odd nav-9-3-8 ">                        <a class="vertnavlink" href="/the-brand/designers/fujiwo-ishimoto"><span>石本藤雄</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-vuokko-eskolin-nurmesniemi odd last nav-9-3-28 ">                        <a class="vertnavlink" href="/the-brand/designers/vuokko-eskolin-nurmesniemi"><span>ヴオッコ・エスコリン-ヌルメスニエミ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-erja-hirvi even nav-9-3-7 ">                        <a class="vertnavlink" href="/the-brand/designers/erja-hirvi"><span>エルヤ・ヒルヴィ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-mai-ohta even nav-9-3-15 ">                        <a class="vertnavlink" href="/the-brand/designers/mai-ohta"><span>大田舞</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-mai-ohta even nav-9-3-15 ">                        <a class="vertnavlink" href="/the-brand/designers/carina-seth-andersson"><span>カリーナ・セス-アンダーソン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-kustaa-saksi odd nav-9-3-14 ">                        <a class="vertnavlink" href="/the-brand/designers/kustaa-saksi"><span>クスター・サクシ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-satu-maaranen odd nav-9-3-24 ">                        <a class="vertnavlink" href="/the-brand/designers/satu-maaranen"><span>サトゥ・マーラネン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-sami-ruotsalainen even nav-9-3-23 ">                        <a class="vertnavlink" href="/the-brand/designers/sami-ruotsalainen"><span>サミ・ルオッツァライネン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-sanna-annukka odd nav-9-3-22 ">                        <a class="vertnavlink" href="/the-brand/designers/sanna-annukka"><span>サンナ・アンヌッカ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-sofia-jarnefelt even nav-9-3-25 ">                        <a class="vertnavlink" href="/the-brand/designers/sofia-jarnefelt"><span>ソフィア・ヤルネフェルト</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-teemu-muurimaki odd nav-9-3-26 ">                        <a class="vertnavlink" href="/the-brand/designers/teemu-muurimaki"><span>テーム・ムーリマキ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-tuula-poyhonen even nav-9-3-27 ">                        <a class="vertnavlink" href="/the-brand/designers/tuula-poyhonen"><span>トゥーラ・ポウホネン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-paavo-halonen odd nav-9-3-20 ">                        <a class="vertnavlink" href="/the-brand/designers/paavo-halonen"><span>パーヴォ・ハロネン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-harri-koskinen odd nav-9-3-10 ">                        <a class="vertnavlink" href="/the-brand/designers/harri-koskinen"><span>ハッリ・コスキネン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-hanna-kaisa-korolainen even nav-9-3-9 ">                        <a class="vertnavlink" href="/the-brand/designers/hanna-kaisa-korolainen"><span>ハンナ-カイサ・コロライネン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-maija-isola odd nav-9-3-16 ">                        <a class="vertnavlink" href="/the-brand/designers/maija-isola"><span>マイヤ・イソラ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-maija-louekari even nav-9-3-17 ">                        <a class="vertnavlink" href="/the-brand/designers/maija-louekari"><span>マイヤ・ロウエカリ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-mari-isopahkala odd nav-9-3-18 ">                        <a class="vertnavlink" href="/the-brand/designers/mari-isopahkala"><span>マリ・イソパハカラ</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-mika-piirainen even nav-9-3-19 ">                        <a class="vertnavlink" href="/the-brand/designers/mika-piirainen"><span>ミカ・ピーライネン</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-reeta-ek even nav-9-3-21 ">                        <a class="vertnavlink" href="/the-brand/designers/reeta-ek"><span>レータ・エーク</span></a>                      </li>                      <li class="vertical-nav-item level2 nav-katsuji-wakisaka even nav-9-3-13 ">                        <a class="vertnavlink" href="/the-brand/designers/katsuji-wakisaka"><span>脇阪克二</span></a>                      </li>                    </ul>                  </li>                  <li class="vertical-nav-item level1 nav-core-values even nav-9-5 ">                    <a class="vertnavlink" href="/the-brand/design-philosophy"><span>デザイン理念</span></a>                  </li>                  <li class="vertical-nav-item level1 nav-core-values odd nav-9-4 ">                    <a class="vertnavlink" href="/the-brand/core-values"><span>価値観</span></a>                  </li>                  <li class="vertical-nav-item level1 nav-vastuullisuus odd nav-9-6 ">                    <a class="vertnavlink" href="/the-brand/sustainability"><span>マリメッコの責任</span></a>                  </li>                  <li class="vertical-nav-item level1 nav-yhteystiedot even last nav-9-7 ">                    <a class="vertnavlink" href="/inquiry/index"><span>お問い合わせ</span></a>                  </li>                  </ul>                </li>                                                                <li class="vertical-nav-item fav-collection level0 nav-myymalat odd nav-12 closed">                    <a class="vertnavlink"><span>Fabric Collection<span class="expandlink"></span></span></a>                    <ul class="clearfix child-category">                        <li class="vertical-nav-item level1 nav-12-1 odd "><a class="vertnavlink" href="/shop/fabriccollection/item/list"><span>All items</span></a></li>                                                                                                                                                                                                <li class="vertical-nav-item even level1 nav-12-2 marimekko-Classics closed"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/101"><span>Classics<span class="expandlink"></span></span></a>                            <ul class="clearfix">                                <li class="vertical-nav-item level2 nav-12-1 odd "><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/101"><span>All items</span></a></li>                                                                                                                                                                                                                                                                                                <li class="vertical-nav-item even level2 nav-12-2 marimekko-C_Cotton"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/104"><span>Cotton<span class="expandlink"></span></span></a></li>                                                                                                                                                                                                                                <li class="vertical-nav-item even level2 nav-12-2 marimekko-C_Coated fabrics"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/105"><span>Coated fabrics<span class="expandlink"></span></span></a></li>                                                                                                                                                                                                                                <li class="vertical-nav-item even level2 nav-12-2 marimekko-C_Sateen"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/106"><span>Sateen<span class="expandlink"></span></span></a></li>                                                                                                                                                                                                                                <li class="vertical-nav-item even level2 nav-12-2 marimekko-C_Linen"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/107"><span>Linen<span class="expandlink"></span></span></a></li>                                                                                                                                                                                                                                <li class="vertical-nav-item even level2 nav-12-2 marimekko-C_Batiste"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/108"><span>Batiste<span class="expandlink"></span></span></a></li>                                                            </ul>                        </li>                                                                                                                                                                        <li class="vertical-nav-item odd level1 nav-12-3 marimekko-Seasonal closed"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/102"><span>Seasonal<span class="expandlink"></span></span></a>                            <ul class="clearfix">                                <li class="vertical-nav-item level2 nav-12-1 odd "><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/102"><span>All items</span></a></li>                                                                                                                                                                                                                                                                                                <li class="vertical-nav-item odd level2 nav-12-3 marimekko-S_Cotton"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/109"><span>Cotton<span class="expandlink"></span></span></a></li>                                                                                                                                                                                                                                <li class="vertical-nav-item odd level2 nav-12-3 marimekko-S_Coated fabrics"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/110"><span>Coated fabrics<span class="expandlink"></span></span></a></li>                                                                                                                                                                                                                                <li class="vertical-nav-item odd level2 nav-12-3 marimekko-S_Sateen"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/111"><span>Sateen<span class="expandlink"></span></span></a></li>                                                                                                                                                                                                                                <li class="vertical-nav-item odd level2 nav-12-3 marimekko-S_Linen"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/112"><span>Linen<span class="expandlink"></span></span></a></li>                                                                                                                                                                                                                                <li class="vertical-nav-item odd level2 nav-12-3 marimekko-S_Batiste"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/113"><span>Batiste<span class="expandlink"></span></span></a></li>                                                            </ul>                        </li>                                                                                                                                                                        <li class="vertical-nav-item even level1 nav-12-4 marimekko-Japan exclusive closed"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/122"><span>Japan exclusive<span class="expandlink"></span></span></a>                            <ul class="clearfix">                                <li class="vertical-nav-item level2 nav-12-1 odd "><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/122"><span>All items</span></a></li>                                                                                                                            </ul>                        </li>                                                                                                                                                                        <li class="vertical-nav-item odd level1 nav-12-5 marimekko-Kids' prints closed"><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/103"><span>Kids' prints<span class="expandlink"></span></span></a>                            <ul class="clearfix">                                <li class="vertical-nav-item level2 nav-12-1 odd "><a class="vertnavlink" href="/shop/fabriccollection/item/list/category_id/103"><span>All items</span></a></li>                                                                                                                            </ul>                        </li>                                            </ul>                </li>              <li class="vertical-nav-item level0 nav-myymalat even nav-11 nav-shoplist ">                <a class="vertnavlink" href="/shops/"><span>Shop List</span></a>              </li>            </ul>            <ul class="storelocator-link">              <li class="vertical-nav-item level0">                <a class="vertnavlink" href="/shops/"><img src="/assets/skin/frontend/carbon/marimekko/images/ui/icon-storelocator.png"> ショップリスト</a>              </li>            </ul>                                </div>        </div><!-- vertical-nav-container -->            <div>              <form id="search_desktop_form" action="/item/search" method="get" ga-event-category="Site Search" class="ga-submit-event">                <div class="input-wrapper">                  <!-- <button class="flat-button" type="submit"></button> -->                  <!-- <input id="search-desktop" type="text" name="keyword" value="" class="input-search flat-input" maxlength="128" placeholder="Search" autocomplete="off"> -->                    <button type="submit" class="icon_header_search fa fa-search"></button>                    <input id="search-desktop" type="text" name="keyword" placeholder="Search" autocomplete="off">                </div>              </form>            </div>      </div>    </div>  </div></div></div>      </nav>    <main>      <div class="container">        <div class="customer-links">          <ul class="links inline">                      <li class="first last" >[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    </ul>        </div><div class="news-list row list-layout">    <div class="news-wrap">        <article id="257">            <div class="news-content clearfix">[metatags_descriptionx]<h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>[metatags_descriptionx]        <div class="box_clearfix">          <section class="news" id="news0">            <div class="page-header">              <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>            </div>                        <section class="row-fluid">                                                <div class="span6">                  <table>                    <tr>                        <th>[hrefx][hrefx][hrefx][hrefx]</th>                        <td>                            <p class="date"><span>2017.07.28</span><span class="red">NEW</span></p>                            [hrefx][hrefx][hrefx][hrefx][hrefx]                        </td>                    </tr>                    </table>                </div>                                                <div class="span6">                  <table>                    <tr>                        <th>[hrefx][hrefx][hrefx][hrefx][hrefx]</th>                        <td>                            <p class="date"><span>2017.07.27</span><span class="red">NEW</span></p>                            [hrefx][hrefx][hrefx][hrefx][hrefx]                        </td>                    </tr>                    </table>                </div>                            </section>                        <section class="row-fluid">                                                <div class="span6">                  <table>                    <tr>                        <th>[hrefx][hrefx][hrefx][hrefx]</th>                        <td>                            <p class="date"><span>2017.07.21</span></p>                            [hrefx][hrefx][hrefx][hrefx][hrefx]                        </td>                    </tr>                    </table>                </div>                                                <div class="span6">                  <table>                    <tr>                        <th>[hrefx][hrefx][hrefx][hrefx]</th>                        <td>                            <p class="date"><span>2017.07.21</span></p>                            [hrefx][hrefx][hrefx][hrefx][hrefx]                        </td>                    </tr>                    </table>                </div>                            </section>                        <section class="row-fluid">                                                <div class="span6">                  <table>                    <tr>                        <th>[hrefx][hrefx][hrefx][hrefx]</th>                        <td>                            <p class="date"><span>2017.07.18</span></p>                            [hrefx][hrefx][hrefx][hrefx][hrefx]                        </td>                    </tr>                    </table>                </div>                                                <div class="span6">                  <table>                    <tr>                        <th>[hrefx][hrefx][hrefx][hrefx]</th>                        <td>                            <p class="date"><span>2017.07.12</span></p>                            [hrefx][hrefx][hrefx][hrefx]                        </td>                    </tr>                    </table>                </div>                            </section>                        <section>              <div class="back-newsall">                [hrefx][hrefx][hrefx][hrefx]              </div>            </section>          </section>        </div>    </div></div><script>(function ($) {    var title = $("title").text().replace(/(^.+?)(\s.*$)/, '$1');    $(".breadcrumb").find('.active').html(title);})(jQuery);</script>        </div><!-- /container -->      </main>    </div><!-- /content-area -->    <footer>      <div id="footer">        <div class="container">          <div class="">            <div class="col-xs-12 col-sm-12 col-md-12 newsletter">                              <div class="newsletter-container">                  <h5>マリメッコの新規会員登録はこちら</h5>                  <div class="content">                    [hrefx][hrefx][hrefx][hrefx]                  </div>                </div>                          </div>          </div>          <div class="row secondary-footer-content">            <div class="col-xs-12 col-sm-4 col-md-4 col-lg-3">              <h5 class="heading store-locator">                [hrefx][hrefx][hrefx][hrefx][hrefx]              </h5>              <h5 class="heading recruit">[hrefx][hrefx][hrefx][hrefx][hrefx]</h5>              <h5 class="content-heading">言語選択</h5>              <div class="content">                <div class="currency-switcher">                  <select id="select-currency" title="Select Currency" onchange="location.href=this.value">                    <option value="http://www.marimekko.cn/#CN">China</option>                    <option value="https://marimekko.com/dk_en/">Denmark</option>                    <option value="https://marimekko.com/eu_en/">EU</option>                    <option value="https://marimekko.com/fi_fi/" >Finland</option>                    <option value="https://marimekko.com/de_en/">Germany </option>                    <option value="https://marimekko.com/com_en/">Global</option>                    <option value="/" selected="selected">Japan</option>                    <option value="http://www.marimekko.kr/#KR">Korea</option>                    <option value="https://marimekko.com/no_en/">Norway</option>                    <option value="https://marimekko.com/se_en/">Sweden</option>                    <option value="https://marimekko.com/gb_en/">UK</option>                    <option value="https://us.marimekko.com/#US">US</option>                  </select>                </div>              </div>            </div>            <div class="col-xs-12 col-sm-4 col-md-4 col-lg-3">              <div class="content">                <ul class="clearfix">                  <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                  <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                  <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                  <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                </ul>              </div>            </div>            <div class="col-xs-12 col-sm-4 col-md-4 col-lg-3">              <div class="content">                <ul class="clearfix">                  <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                  <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                  <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                  <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                </ul>              </div>            </div>            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-3 col-social-media">              <h5 class="heading social-media">                <span>Follow us</span>              </h5>              <div class="content">                <ul>                  <li><a class="facebook-icon" href="https://www.facebook.com/marimekko.jp/" title="Facebook" target="_blank"></a></li>                  <li><a class="twitter-icon" href="https://twitter.com/marimekkojapan" title="Twitter" target="_blank"></a></li>                  <li><a class="pinterest-icon" href="http://pinterest.com/marimekkodesign/" title="Pinterest" target="_blank"></a></li>                  <li><a class="youtube-icon" href="http://www.youtube.com/marimekkovideo" title="Youtube" target="_blank"></a></li>                  <li><a class="instagram-icon" href="https://www.instagram.com/marimekkojapan/" title="Instagram" target="_blank"></a></li>                  <li><a class="linkedin-icon" href="http://www.linkedin.com/company/marimekko" title="Linkedin" target="_blank"></a></li>                </ul>              </div>            </div>          </div>          <div class="row">            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">              <div class="design-from-finland">                <img src="/assets/skin/frontend/carbon/marimekko/images/graphics/icon-design-from-finland.png" alt="Design From Finland">              </div>              <div class="copyright">                &copy; Marimekko 2017              </div>              <div id="pagetop-area">                <span id="pagetop"></span>              </div>            </div>          </div>        </div>      </div>    </footer>  </div><!-- /wrapper -->    <!-- Le javascript    ================================================== -->    <!-- Placed at the end of the document so the pages load faster -->        <script src="/assets/media/js/5dbbc798bba3dfc8f6b8aa43e10e4a04.js"></script>    <script src="/assets/js/jquery.velocity.js"></script>    <script src="/assets/bootstrap/js/bootstrap.js"></script>    <script src="/assets/js/hammer.min.js"></script>    <script src="/assets/boxer-master/jquery.fs.boxer.js"></script>    <script src="/assets/flexslider/jquery.flexslider-min.js"></script>    <script src="/assets/js/jquery-re.js"></script>    <script src="/assets/js/jquery.cookie.js"></script>    <script src="/assets/js/lazyImage.js"></script>    <script src="/assets/fancybox/jquery.mousewheel-3.0.6.pack.js"></script>    <script src="/assets/fancybox/jquery.fancybox.pack.js"></script>    <script type="text/javascript" src="/assets/js/jquery-barcode.min.js"></script>    <script src="/assets/js/jquery.ds2front.js"></script>    <script src="/assets/js/dispatcher.js" charset="utf-8"></script>    <script src="/assets/js/jquery.tile.min.js"></script>    <div style="display:none;">          <!-- Google Tag Manager (noscript) -->  <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-N4N75LD" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>  <!-- End Google Tag Manager (noscript) -->    <script type="text/javascript">  // UniversalAnalytics:ua; version:1.13; tracker:ua;  (function() {    if(!window.ga) {      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');    }                  ga('create', 'UA-73916726-1', 'auto', {        'name': 'ua',        'cookieDomain': 'none',        'allowLinker': true      });      ga('ua.require', 'linker');            ga('ua.linker:autoLink', ["www.marimekko.jp","look-member.jp","look.dh-manager.jp"], false, true);              ga('ua.require', 'displayfeatures');    //ga('ua.require', 'linkid', 'linkid.js', { 'levels': 5 });                  ga('ua.set', 'dimension1', false);             ga('ua.set', 'dimension4', "");     ga('ua.set', 'dimension5', "static");     ga('ua.set', 'dimension6', "display");                                 ga('ua.set', 'dimension16', "");                      var pathname = window.location.pathname;    var isMobile = pathname.match(/^\/m\//) ? true : false;    pathname = pathname.replace(/^\/m\//, '/');    pathname = pathname.replace(/(PC|MB)SID=([^&]+)/, '');    pathname = pathname.replace(/\?$/, '');    var location = pathname + window.location.search;    ga('ua.send', 'pageview', { 'page': location });                        jQuery( document ).on( 'click', '.ga-click-event', function () {        var $this = jQuery( this )          , category = $this.attr( 'ga-event-category' ) || $this.attr( 'title' ) || $this.attr( 'href' )          , action   = $this.attr( 'ga-event-action' ) || 'click'          , label    = $this.attr( 'ga-event-label' ) || $this.text()          , value    = $this.attr( 'ga-event-value' ) || 1;        ga( 'ua.send', 'event', category, action, label, value );    });        jQuery( document ).on( 'submit', '.ga-submit-event', function () {        var $this = jQuery( this )          , category = $this.attr( 'ga-event-category' ) || $this.attr( 'title' ) || $this.attr( 'href' )          , action   = $this.attr( 'ga-event-action' ) || 'click'          , label    = $this.attr( 'ga-event-label' ) || $this.find('#search-desktop').val() || $this.find('#search-mobile').val() || null          , value    = $this.attr( 'ga-event-value' ) || 1;        ga( 'ua.send', 'event', category, action, label, value );    });  })();</script>            <script type="text/javascript">      (function () {        var tagjs = document.createElement("script");        var s = document.getElementsByTagName("script")[0];        tagjs.async = true;        tagjs.src = "//s.yjtag.jp/tag.js#site=JmU3CNE";        s.parentNode.insertBefore(tagjs, s);      }());    </script>    <noscript>      <iframe src="//b.yjtag.jp/iframe?c=JmU3CNE" width="1" height="1" frameborder="0" scrolling="no" marginheight="0" marginwidth="0"></iframe>    </noscript>              <!-- Cart Recovery -->    <script>    (function(w,d,s,c,i){w[c]=w[c]||{};w[c].trackingId=i;    var f=d.getElementsByTagName(s)[0],j=d.createElement(s);j.async=true;    j.src='//cdn.contx.net/collect.js';f.parentNode.insertBefore(j,f);    })(window,document,'script','contx','CTX-xKPRxPhB');    </script>    <!-- End Cart Recovery -->              </div>        <script>    jQuery(document).ready(function(){      jQuery(".customer_api_popup").click(function(e){        target_obj = jQuery(this);        if(!jQuery(e.target).hasClass("customer_api_popup_link")){          target_obj.find("a.customer_api_popup_link").trigger('click');        }      });      jQuery(".customer_api_popup_link").click(function(e){        $query_string = "";        target_link = jQuery(this).attr("href").replace(/\?.+$/ig,'');        jQuery.ajax({          type : 'GET',          url : "https://www.marimekko.jp/otp/create/",          cache : false,          success : function(data){            fixed_link = target_link + data;            jQuery(".customer_api_popup_hidden_link").attr("href",fixed_link);            jQuery(".customer_api_popup_hidden_link").trigger("click")            console.log(data);          }        });        return false;      });      jQuery(".customer_api_popup_hidden_link").fancybox({        scrolling : 'auto',        preload   : true,        padding   : 0,        width     : 1000,        height    : 800,        autoSize  : false      });    });    </script>            <!-- qdLnPRx9yTYmVzcM -->  </body>  </html>