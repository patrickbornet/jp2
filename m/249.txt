<!DOCTYPE html><!--[if lt IE 7 ]><html lang="[语言]" dir="ltr" class="no-js ie6 language-ja" itemscope itemtype="http://schema.org/WebPage" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"><![endif]--><!--[if IE 7 ]>   <html lang="ja" dir="ltr" class="no-js ie7 language-ja" itemscope itemtype="http://schema.org/WebPage" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"><![endif]--><!--[if IE 8 ]>   <html lang="ja" dir="ltr" class="no-js ie8 language-ja" itemscope itemtype="http://schema.org/WebPage" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"><![endif]--><!--[if IE 9 ]>   <html lang="ja" dir="ltr" class="no-js ie9 language-ja" itemscope itemtype="http://schema.org/WebPage" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"><![endif]--><!--[if IE 10 ]>  <html lang="ja" dir="ltr" class="no-js ie10 language-ja" itemscope itemtype="http://schema.org/WebPage" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"><![endif]--><!--[if IE 11 ]>  <html lang="ja" dir="ltr" class="no-js ie11 language-ja" itemscope itemtype="http://schema.org/WebPage" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"><![endif]--><!--[if gt IE 11]><!--> <html lang="ja" dir="ltr" class="no-js  language-ja" itemscope itemtype="http://schema.org/WebPage" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"><!--<![endif]--><head>    <!--Charset-->    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />    <!--Title-->    <title>[metatags_title]</title>    <!--SEO-->    <meta name="description" content="[metatags_description]" />    <meta name="keywords" content="[metatags_keywords]" />    <meta name="language" content="ja" />    <meta http-equiv="content-language" content="ja" />            <link rel="alternate"  href="http://www.piaget.com/events/altiplano-60th-anniversary" hreflang="en-US" />            <link rel="alternate"  href="http://www.piaget.fr/events/60e-anniversaire-altiplano" hreflang="fr" />            <link rel="alternate"  href="http://en.piaget.com/events/altiplano-60th-anniversary" hreflang="en-GB" />            <link rel="alternate"  href="http://fr.piaget.ch/events/60e-anniversaire-altiplano" hreflang="fr-CH" />            <link rel="alternate"  href="http://www.piaget.ch/events/altiplano-60-Geburtstag" hreflang="de-CH" />            <link rel="alternate"  href="http://www.piaget.de/events/altiplano-60-Geburtstag" hreflang="de" />            <link rel="alternate"  href="http://www.piaget.es/events/altiplano-60-aniversario" hreflang="es" />            <link rel="alternate"  href="http://ru.piaget.com/events/60-летие-коллекции-altiplano" hreflang="ru" />            <link rel="alternate"  href="http://www.piaget.com.hk/events/altiplano-60th-anniversary" hreflang="zh-Hant" />            <link rel="alternate"  href="http://www.piaget.tw/events/altiplano-60th-anniversary" hreflang="zh-Hant-TW" />            <link rel="alternate"  href="http://www.piaget.jp/events/Altiplano-ウォッチ-60周年" hreflang="ja" />            <link rel="alternate"  href="http://www.piaget.kr/events/altiplano-60th-anniversary" hreflang="ko" />            <link rel="alternate"  href="http://www.piaget.ae/events/altiplano-60th-anniversary" hreflang="ar" />            <link rel="alternate"  href="http://int.piaget.com/events/altiplano-60th-anniversary" hreflang="en" />            <link rel="alternate" media="only screen and (max-width: 640px)" href="http://m.piaget.jp/events/Altiplano-ウォッチ-60周年"  />        <!--IE Metas-->    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />    <!--[if IE]>    <meta http-equiv="imagetoolbar" content="no">    <![endif]-->    <!--Follow for search engines -->        <meta name="robots" content="index, follow" />    <!--Mobile-->    <meta name="viewport" content="width=device-width, initial-scale=1" />    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />    <link rel="apple-touch-startup-image" href="http://static.piaget.com/pub/app/piagetcom/img/splash.png" />    <!-- Pinterest Tag -->    <meta name="p:domain_verify" content="a826b651995d7bcb68d36282e0dc6dd0" />    <!--Favicon-->    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="http://static.piaget.com/pub/app/piagetcom/img/apple-touch-icon-144-precomposed.png" />    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="http://static.piaget.com/pub/app/piagetcom/img/apple-touch-icon-114-precomposed.png" />    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="http://static.piaget.com/pub/app/piagetcom/img/apple-touch-icon-72-precomposed.png" />    <link rel="apple-touch-icon-precomposed" href="http://static.piaget.com/pub/app/piagetcom/img/apple-touch-icon-57-precomposed.png" />    <link rel="shortcut icon" href="http://static.piaget.com/pub/favicon.ico" />    <!--OpenGraph-->    <meta property="og:type" content="website" />        <meta property="og:image" content="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/75317/370/16x9/v11.jpg"/>            <meta property="og:title" content="[metatags_title]"/>            <meta property="og:description" content="[metatags_description]"/>            <meta property="og:url" content="http://www.piaget.jp/events/Altiplano-ウォッチ-60周年"/>        <!--optional links for paginations (only VV_post_selection at this time 23/05/13-->            <!--RSS-->    <link rel="alternate" type="application/rss+xml" title="RSS" href="/rss" />    <!--CSS-->    <link type="text/css" rel="stylesheet" href="http://static.piaget.com/pub/css/main.css?CpVq4m3AhgN9pdKz3IdTSd0kWph2W6j2Kvw7n8IfDpxq5uVx0pHjpIs6BaGqkNV6LecL0TXQRlsGthABF6zKw" media="all" integrity="sha512-CpVq4m3AhgN9pdKz+3IdTSd0kWph2W6j2Kvw7n8IfDpxq5uVx0pHjpIs6BaGqkNV6LecL0TXQRlsGthABF6zKw==" crossorigin="anonymous" />    <link type="text/css" rel="stylesheet" href="http://static.piaget.com/pub/css/print.css?KFqgEr91K3Q3ZJbLGgoBdlOfLickUM4aUo5LVJhB1TGrCPE9nRtgljNOY09BMxKDcVAUvAk7zmn9L7OQdzA" media="print" integrity="sha512-KFqgEr/91K3Q3ZJbLGgoBdlOfLick/UM4aUo5LVJhB1TGrCPE9/nRtgljNOY09BMxKDcVAUvAk7zmn9L7OQdzA==" crossorigin="anonymous" />            <link type="text/css" rel="stylesheet" href="http://static.piaget.com/pub/css/main-ecom.css?jJqK2FGLQsVtoHJNbLBW3Pulztv9kSEqgBOwCr5jSwaydcgkTmnYiKiTgzatebrKZ0iBTyLr82NUDj15B4Q" media="all" integrity="sha512-jJqK2FGLQsVtoHJNbLBW3Pulztv9kSEqgBOwCr5jSwaydcgkTmnYiKiTgzat/eb+rKZ0iBTyLr82NUD+j15B4Q==" crossorigin="anonymous" />                <!--[if gte IE 9]>    <style type="text/css">        .product-tabs {            filter: none;        }    </style>    <![endif]-->        <!--JS-->    <script>ControllerVars={"Stats":{"gtmActive":true,"consoleLogActive":false}};</script><script src="http://static.piaget.com/pub/libs/modernizr-2.5.3.min.js?38vrnGUHYJhBNqer27LbkuKOATUJ4UT0mngiY7qUVXleijDphQJUxWrQDLqW5eI6Z8ca5sbSPL9icW6iyg" integrity="sha512-38vrnGUHYJhBNqer27LbkuK+OATUJ4UT0mngiY/7q/UVXleijDphQJUxWrQDLqW5eI6Z8ca5sb+SPL9icW6iyg==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/libs/swfobject.js?3hmEkIdoEXzA8s36qxAzUupTo0P0tGyfAvKpnARYc5zOWTiuwnYux1DT8Jt0MRpm2vq1FlesIim59nt5bzxpUw" integrity="sha512-3hmEkIdoEXzA8s36qxAzUupTo0P0tGyfAvKpnARYc5zOWTiuwnYux1DT8Jt0MRpm2vq1FlesIim59nt5bzxpUw==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/libs/MobileRedirect.js?1AXFgJKjlgl2XryQyQupAojUNKCm4D1q4klT1IINrMqBWfUVJeyrnxb0jexLotrBATluUeiP9FVEICvwDUUg" integrity="sha512-1AXFgJKjlgl2XryQyQupAojUNKC/m4D1q4klT1IINrMqBWfUVJeyrnxb0jexLotrBATlu/UeiP9FVEICvwDUUg==" crossorigin="anonymous" ></script></head><body class="" data-secure-page=false data-page-type="" data-desktop>[metatags_descriptionx]    </p>    <p class="last">        [hrefx]    </p></div><script type="text/javascript">    var jsonData = {"metaTitle":"Altiplano \u30a6\u30a9\u30c3\u30c1 60\u5468\u5e74 - \u30d4\u30a2\u30b8\u30a7 \u30cb\u30e5\u30fc\u30b9\uff06\u30a4\u30d9\u30f3\u30c8","metaKeywords":"altiplano, \u9ad8\u7d1a\u30a6\u30a9\u30c3\u30c1, \u9ad8\u7d1a\u30b8\u30e5\u30a8\u30ea\u30fc, \u30d4\u30a2\u30b8\u30a7, \u30a4\u30d9\u30f3\u30c8","metaDescription":"Altiplano60\u5468\u5e74\u3092\u8a18\u5ff5\u3059\u308b\u3001\u7a76\u6975\u306e\u30a8\u30ec\u30ac\u30f3\u30c8\u30a6\u30aa\u30c3\u30c1","metaViewport":"width=device-width, initial-scale=1","metaOgImage":"http:\/\/static.piaget.com\/pub\/media\/cache\/img_piaget\/photoRect\/75317\/370\/16x9\/v11.jpg","metaOgImages":null,"metaOgTitle":"Altiplano \u30a6\u30a9\u30c3\u30c1 60\u5468\u5e74 - \u30d4\u30a2\u30b8\u30a7 \u30cb\u30e5\u30fc\u30b9\uff06\u30a4\u30d9\u30f3\u30c8","metaOgDescription":"Altiplano60\u5468\u5e74\u3092\u8a18\u5ff5\u3059\u308b\u3001\u7a76\u6975\u306e\u30a8\u30ec\u30ac\u30f3\u30c8\u30a6\u30aa\u30c3\u30c1","metaOgUrl":null,"linkPrev":null,"linkNext":null,"langCode":"ja","countryCode":"JP","isMobile":false,"desktopUrl":"http:\/\/www.piaget.jp\/events\/Altiplano-\u30a6\u30a9\u30c3\u30c1-60\u5468\u5e74","mobileUrl":"http:\/\/m.piaget.jp\/events\/Altiplano-\u30a6\u30a9\u30c3\u30c1-60\u5468\u5e74","fullPage":"site\/piaget\/site\/market\/Japan\/market\/langue\/Japanese\/langue\/page\/EVENTS\/POST\/Piaget Altiplano Campaign Hu Ge-4951\/page","hasPageHit":true,"stat_site":"piaget","stat_market":"Japan","stat_langue":"Japanese","pageUrl":{"__primary__":[],"modelName":"PageUrl","id":"1505897","PageUrl":{"id":"1505897","internationalId":"1505897","resourceType":"Post","resourceId":"4951","action":"","controller":""}},"pageType":null,"englishLanguage":null,"disableLocalAdmin":false,"isAjax":false,"localisationCode":"ja-JP"};</script><script>    var dataLayer = [];            dataLayer.push({            page: 'site/piaget/site/market/Japan/market/langue/Japanese/langue/page/EVENTS/POST/Piaget Altiplano Campaign Hu Ge-4951/page/action/view/action/'        });        dataLayer.push({        'UA': "UA-15249600-2",        'Container': "GTM-8BP3",        'domainName': "none",        'setAllowLinker': true,        'socialTracking': true,        'Campaign cookie timeout': '6 months',        'device': 'desktop'    });    // Pushes parameters that have to be push on page load    dataLayer.push([]);    (function(t,r,a,c,k,i,n,g){t.AnalyticsBy55=c,t[c]=t[c]||function(){(t[c].q=t[c].q||[]).push(arguments)},t[c]("config","dataLayer",k),(n||[]).length&&(t[c].r=n),t[c].dl=t[k]=t[k]||[],t[k]=[{event:"core.js"}],function(w,d,s,l,i){var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl="dataLayer"!=l?"&l="+l:"";j.async=!0,j.src="//www.googletagmanager.com/gtm.js?id="+i+dl,f.parentNode.insertBefore(j,f)}(t,r,a,k,i)})(window,document,"script","_55","dataLayer","GTM-8BP3",[]);</script><!-- fast detection mobile or not -->    <script>        function deviceRedirection(){            var isIE = function () {                var myNav = navigator.userAgent.toLowerCase();                return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;            }            // make the fast redirection only if its not IE or if its superior as IE8            if ((!isIE() || isIE() > 8) && MobileRedirect.isScreenSizeMobile()) {                var url = "/piaget/redirectByHttp?redirectUrl=http%3A%2F%2Fm.piaget.jp%2Fevents%2FAltiplano-%E3%82%A6%E3%82%A9%E3%83%83%E3%83%81-60%E5%91%A8%E5%B9%B4";                MobileRedirect.redirectWithQueryString(url);            }        }                    // Device redirection as soon as we know that Gtm is not swimming in yogurt            if (document.addEventListener) {                document.addEventListener("piaget.pageLoad", deviceRedirection);            } else if(document.attachEvent) {                document.attachEvent("onpiaget.pageLoad", deviceRedirection);            }            // If GTM is active but didn't notify it is ready after 3 seconds, let's go            setTimeout(deviceRedirection, 3000);            </script><div id="browser-info" class="hidden hide bg-white color-light pt1 pb1" style="display: none"></div>        <div class="piaget-rwd">    <div class="topbar-wrapper hidden-ipad-portrait-up">        <div class="topbar">            <div class="topbar__center" style="margin: 0 auto;">                <a href="/" title="Piaget">                    <img src="http://static.piaget.com/pub/app/piagetcom/img/piaget-logo.png"                        srcset="http://static.piaget.com/pub/app/piagetcom/img/piaget-logo.png, http://static.piaget.com/pub/app/piagetcom/img/piaget-logo@2x.png 2x"                        class="logo" alt="Piaget">                </a>            </div>        </div>    </div>    <div class="navbar-wrapper hidden-ipad-portrait-down">        <div id="menu_navbar" class="navbar">            <div class="navbar__body">                <div class="container">                    <div class="navbar__start">                        <ul class="nav-secondary" role="navigation" aria-label="Contacts">                                                            <li>                                    <a href="#"  data-nav-ajax-href='/popin_relationship/concierge/popin'  data-nav-ajax-receiver='popin'  data-nav-ajax-stats='speak-with-concierge'  tabindex="2">                                        <svg class="ico ico--phone">                                            <use xlink:href="#phone"></use>                                        </svg>                                        0120-73-1874                                    </a>                                </li>                                                        <li>                                <a href="/店舗検索" tabindex="2">                                    <svg class="ico ico--geolocation">                                        <use xlink:href="#geolocation"></use>                                    </svg>                                    店舗検索                                </a>                            </li>                        </ul>                        <nav role="navigation" aria-label="Products">                            <ul class="nav-primary" role="tablist">                                <li id="menu-item-watches" role="tab" aria-controls="menu-watches">[hrefx]</li>                                <li id="menu-item-jewellery" role="tab" aria-controls="menu-jewellery">[hrefx]</li>                                <li id="menu-item-high-jewellery" role="tab" aria-controls="menu-high-jewellery">[hrefx]</li>                            </ul>                        </nav>                    </div>                    <div class="navbar__center">                        <a href="/" title="Piaget">                            <img                                src="http://static.piaget.com/pub/app/piagetcom/img/piaget-logo.png"                                srcset="http://static.piaget.com/pub/app/piagetcom/img/piaget-logo.png, http://static.piaget.com/pub/app/piagetcom/img/piaget-logo@2x.png 2x"                                class="navbar__logo"                                alt="Piaget">                        </a>                    </div>                    <div class="navbar__end">                        <ul id="navbar-quick-menu" data-content-url="/quick_menu/contents/" data-wishlist-content-url="/quick_menu/wishListProducts" data-control-secure-url="/ecommerce/controlSecureUrl"  class="nav-secondary quickmenu" role="navigation" aria-label="Personal space">                                                            <li id="menuMyAccount" class="dropdown" role="menu" aria-labelledby="menu-my-account">    <a id="dropMyAccount" href="#" class="dropdown-toggle" role="button" tabindex="2">        <svg class="ico ico--user">            <use xlink:href="#user"></use>        </svg>        <span id="menu-my-account" class="hidden-md-down">お客様のアカウント</span>    </a>    <div id="menuMyAccountDropDown" class="dropdown-menu" role="region" aria-labelledby="menu-my-account" aria-live="polite" aria-relevant="additions removals"></div></li><li id="menuWishlist" role="menu" aria-labelledby="menu-wishlist">    <a href="/piaget/wishlists" class="relative-parent" tabindex="2">        <svg class="ico ico--heart">            <use xlink:href="#heart"></use>        </svg>        <span id="menu-wishlist" class="hidden">ウィッシュリスト</span>        <output class="badge">0</output>    </a></li>                                                                                        <li>                                    <div class="piaget-rwd" style="color: #002246;">    <form name="search-website" method="GET" action="/search" class="navbar__search-form" role="search">        <input            type="search"            name="keyword"            value=""            placeholder="検索"            class="navbar__search-field"            style="max-width: 180px;"            >        <button type="submit" class="navbar__search-submit btn btn--bare" aria-label="検索" title="検索">            <svg class="ico ico--magnifying-glass">                <use xlink:href="#magnifying-glass"></use>            </svg>        </button>    </form></div>                                </li>                                                    </ul>                        <nav role="navigation" aria-label="Other content">                            <ul class="nav-primary" role="tablist">                                <li id="menu-item-wedding" role="tab" aria-controls="menu-wedding">[hrefx]</li>                                <li role="tab">[hrefx]</li>                                <li id="menu-item-maison-piaget" role="tab" aria-controls="menu-maison-piaget">[hrefx]</li>                            </ul>                        </nav>                    </div>                </div>            </div>            <div class="mega-menu">                <div class="mega-menu__bg"></div>                <div class="mega-menu__body">                    <div class="container">                        <div class="relative-parent">                            <div id="menu-watches" class="mega-menu__panel" role="tabpanel" aria-labelledby="menu-item-watches">                                <div class="grid grid--large">    <div class="grid__item w-1/3">        <h3>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h3>    </div>    <div class="grid__item w-2/3">        <h3>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h3>    </div></div><div class="grid grid--large">    <div class="grid__item w-1/3">        <ul class="list-stacked list-stacked--small" aria-labelledby="submenu-column1-watches">                                                                        <li>                            <a href="/ウォッチ/ギフト">                                ギフト                            </a>                        </li>                                                                                <li>                            <a href="/検索/極薄ウォッチ">                                極薄ウォッチ                            </a>                        </li>                                                                                <li>                            <a href="/検索/スケルトンムーブメント付きウォッチ">                                スケルトンムーブメント付きウォッチ                            </a>                        </li>                                                                                <li>                            <a href="/検索/コンプリケーションウォッチ">                                コンプリケーションウォッチ                            </a>                        </li>                                                                                <li>                            <a href="/検索/ジュエリーウォッチ">                                ジュエリーウォッチ                            </a>                        </li>                                                                                <li>                            <a href="/検索/ゴールドブレスレットウォッチ">                                ゴールドブレスレットウォッチ                            </a>                        </li>                                                                                <li>                            <a href="/検索/トゥールビヨンムーブメント付きウォッチ">                                トゥールビヨンムーブメント付きウォッチ                            </a>                        </li>                                                                                <li>                            <a href="/検索/クロノグラフムーブメント付きウォッチ">                                クロノグラフムーブメント付きウォッチ                            </a>                        </li>                                                                                <li>                            <a href="/ウォッチ/スティール製ウォッチ">                                スティール製ウォッチ                            </a>                        </li>                                                        </ul>    </div>    <div class="grid__item grid__item--separator w-2/3">        <div class="grid grid--multiline" aria-labelledby="submenu-column2-watches">                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ウォッチ/black-tie"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-watches-black_tie-podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Black Tie ウォッチ</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ウォッチ/altiplano"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-watches-altiplano-podium-2-1-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Altiplano ウォッチ</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/グッディーズ/壁紙/piaget-polo"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-watches-polo-podium-1-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Piaget Polo ウォッチ</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ウォッチ/dancer-トラディション-ウォッチ"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-watches-dancer-podium-1-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Dancer およびトラディション ウォッチ</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ウォッチ/エクセプショナルピース"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-watches-exceptional-podium-1-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">エクセプショナル ピース</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ウォッチ/limelight"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-watches-limelight-podium-2-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Limelight ウォッチ</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ウォッチ/possession"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-watches-possession-podium-1-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Possession ウォッチ</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/secrets-and-lights"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-watches-secrets-podium-1-dot-jpg/370/493/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Secrets and Lights ウォッチ</h5>                            </div>                        </a>                    </div>                                    </div>    </div></div>                            </div>                            <div id="menu-jewellery" class="mega-menu__panel" role="tabpanel" aria-labelledby="menu-item-jewellery">                                <div class="grid grid--large">    <div class="grid__item w-1/3">        <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>    </div>    <div class="grid__item w-2/3">        <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>    </div></div><div class="grid grid--large">    <div class="grid__item w-1/3">        <ul class="list-stacked list-stacked--small" aria-labelledby="submenu-column1-jewellery">                                                                        <li>                            <a href="/ジュエリー/ギフト">                                ギフト                            </a>                        </li>                                                                                <li>                            <a href="/検索/リング">                                リング                            </a>                        </li>                                                                                <li>                            <a href="/検索/ネックレス">                                ネックレス                            </a>                        </li>                                                                                <li>                            <a href="/検索/ペンダント">                                ペンダント                            </a>                        </li>                                                                                <li>                            <a href="/検索/ブレスレット">                                ブレスレット                            </a>                        </li>                                                                                <li>                            <a href="/検索/イヤリング">                                イヤリング                            </a>                        </li>                                                        </ul>    </div>    <div class="grid__item grid__item--separator w-2/3">        <div class="grid grid--multiline" aria-labelledby="submenu-column2-jewellery">                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ジュエリー/possession"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-jewelry-possession-podium-1-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Possession ジュエリー</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ジュエリー/piaget-rose"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-jewelry-rose-podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Piaget Rose ジュエリー</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ジュエリー/ピアジェハート"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-jewelry-heart-podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Piaget Heart ジュエリー</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ジュエリー/limelight"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-jewelry-limelight-podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Limelight ジュエリー</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ジュエリー/extremely-piaget"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-jewelry-extremly-podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Extremely Piaget</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ジュエリー/メンズジュエリー"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-jewelry-for_men-podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">メンズジュエリー</h5>                            </div>                        </a>                    </div>                                    </div>    </div></div>                            </div>                            <div id="menu-high-jewellery" class="mega-menu__panel" role="tabpanel" aria-labelledby="menu-item-high-jewellery">                                <div class="grid grid--large">    <div class="grid__item w-1/3">        <h3>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h3>    </div>    <div class="grid__item w-2/3">        <h3>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h3>    </div></div><div class="grid grid--large">    <div class="grid__item w-1/3">        <ul class="list-stacked list-stacked--small" aria-labelledby="submenu-column1-high_jewellery">                                                                        <li>                            <a href="/クラフツマンシップ/セッティング-ジュエリー">                                セッティング                            </a>                        </li>                                                                                <li>                            <a href="/クラフツマンシップ/創造性-ジュエリー">                                創造性 - 飽くなき情熱                            </a>                        </li>                                                                                <li>                            <a href="/クラフツマンシップ/金の細工">                                金の細工と夢のデッサン                            </a>                        </li>                                                        </ul>    </div>    <div class="grid__item grid__item--separator w-2/3">        <div class="grid grid--multiline" aria-labelledby="submenu-column2-high_jewellery">                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/secrets-and-lights"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-Secrets_Podium-2-dot-jpg/370/493/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">Secrets and Lights</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="http://www.piaget.jp/events/sunny-side-of-lifeハイジュエリー"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-SSOL_podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">SUNNY SIDE OF LIFE</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="http://www.piaget.jp/events/sunlight-journey"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-G36M5600 Focus OK-1-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">SUNLIGHT JOURNEY</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ハイジュエリー/extremely-piaget"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-Extremely_Piaget_Podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">EXTREMELY PIAGET</h5>                            </div>                        </a>                    </div>                                    </div>    </div></div>                            </div>                            <div id="menu-wedding" class="mega-menu__panel" role="tabpanel" aria-labelledby="menu-item-wedding">                                <div class="grid grid--large">    <div class="grid__item w-1/3">        <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>    </div>    <div class="grid__item w-2/3">        <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>    </div></div><div class="grid grid--large">    <div class="grid__item w-1/3">        <ul class="list-stacked list-stacked--small" aria-labelledby="submenu-column1-wedding">                                                                        <li>                            <a href="/ウェディング/プラチナ-ウェディングリング">                                プラチナ ウエディングリング                            </a>                        </li>                                                                                <li>                            <a href="/ウェディング/ホワイトゴールド-ウェディングリング">                                ホワイトゴールド ウエディングリング                             </a>                        </li>                                                                                <li>                            <a href="/ウェディング/ピンクゴールド-ウェディングリング">                                ピンクゴールド ウエディングリング                            </a>                        </li>                                                                                <li>                            <a href="/ウエディング/ダイヤモンド-エンゲージメントリング">                                エンゲージメントリング　－　パヴェダイヤモンド                            </a>                        </li>                                                                                <li>                            <a href="/ウエディング/エンゲージメントリング-－-プレーンメタル">                                エンゲージメントリング　－　プレーンメタル                            </a>                        </li>                                                        </ul>    </div>    <div class="grid__item grid__item--separator w-2/3">        <div class="grid grid--multiline" aria-labelledby="submenu-column2-wedding">                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ウェディング/エンゲージメントリング"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-wedding-engagment_rings-podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">エンゲージメント リング</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ウェディング/ウェディングリング"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-wedding-wedding_rings-podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">ウエディング リング</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ウェディング/ギフト"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-wedding-gifts-podium-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">ギフト</h5>                            </div>                        </a>                    </div>                                    </div>    </div></div>                            </div>                            <div id="menu-maison-piaget" class="mega-menu__panel" role="tabpanel" aria-labelledby="menu-item-maison-piaget">                                <div class="grid grid--large">    <div class="grid__item w-1/3">        <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>    </div>    <div class="grid__item w-2/3">        <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>    </div></div><div class="grid grid--large">    <div class="grid__item w-1/3">        <ul class="list-stacked list-stacked--small">                                                <li>                        <a href="/クラフツマンシップ/ピアジェ、真のマニュファクチュール">                            ピアジェ、真のマニュファクチュール                        </a>                    </li>                                                                <li>                        <a href="/クラフツマンシップ/超薄型ムーブメント">                            ピアジェの極薄ムーブメント                        </a>                    </li>                                                                <li>                        <a href="/ノウハウ/ムーブメントの誕生">                            ムーブメントの誕生                         </a>                    </li>                                                                <li>                        <a href="/クラフツマンシップ/時計のセッティング">                            ジュエリーウォッチ                        </a>                    </li>                                                                <li>                        <a href="/クラフツマンシップ/創造性-ジュエリー">                            創造性 - 飽くなき情熱                        </a>                    </li>                                                                <li>                        <a href="/クラフツマンシップ/宝石鑑定">                            宝石鑑定 – 完璧な透明性を求めて                        </a>                    </li>                                    </ul>    </div>    <div class="grid__item grid__item--separator w-2/3">        <div class="grid grid--multiline">                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ブランドの歴史"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/pub-slash-app-slash-piagetcom-slash-img-slash-manufacture-slash-history-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">ブランドの歴史</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/クラフツマンシップ"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/pub-slash-app-slash-piagetcom-slash-img-slash-manufacture-slash-craftmanship-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">クラフツマンシップ</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/ムーブメント"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/pub-slash-app-slash-piagetcom-slash-img-slash-manufacture-slash-movements-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">ムーブメント</h5>                            </div>                        </a>                    </div>                                                                                                                        <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/カスタマー・サービス"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/pub-slash-app-slash-piagetcom-slash-img-slash-manufacture-slash-customer-care-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">サービス</h5>                            </div>                        </a>                    </div>                                                                <div class="grid__item w-1/3 lg-w-1/4">                        <a                            href="/企業理念"                            class="card card--collection card--contrasted">                            <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/pub-slash-app-slash-piagetcom-slash-img-slash-manufacture-slash-ethics-environment-dot-jpg/740/984/noBorder/000000/jpg/v6.jpg" class="card__img" role="presentation" />                            <div class="card__body">                                <h5 class="heading heading--center">企業理念</h5>                            </div>                        </a>                    </div>                                    </div>    </div></div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>    <div class="main-content" role="main">        <div class="screen-height">            <div class="blog-post">    <div class="container__blog">        <div class="piaget-rwd">            <div class="card mrgb+">                <img src="http://static.piaget.com/media/event_desktop_2_570.jpg" class="card__img hidden-xs-down">                <div class="card__body card__body--center">                                            <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                                                        </div>            </div>        </div>        <div class="container">            <div class="row">                <div class="span12">                </div>                                            <div class="span4">                            <div class="sidebar-events">    <div class="piaget-rwd">        <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>    </div>    <ul class="text-menu">                    <li class=" ">                <a href="/events/インスティテューショナル-イベント" data-gtm-parameters="event__%3D__clickOnLeftMenuEditorial__%26__linkClicked__%3D__%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%86%E3%82%A3%E3%83%86%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%20%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88__%26__linkClickedId__%3D__%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%86%E3%82%A3%E3%83%86%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%20%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88__%26__pageName__%3D__events">                インスティテューショナル イベント</a>            </li>                    <li class=" ">                <a href="/events/セレブリティ" data-gtm-parameters="event__%3D__clickOnLeftMenuEditorial__%26__linkClicked__%3D__%E3%82%BB%E3%83%AC%E3%83%96%E3%83%AA%E3%83%86%E3%82%A3__%26__linkClickedId__%3D__%E3%82%BB%E3%83%AC%E3%83%96%E3%83%AA%E3%83%86%E3%82%A3__%26__pageName__%3D__events">                セレブリティ</a>            </li>                    <li class=" ">                <a href="/events/受賞履歴" data-gtm-parameters="event__%3D__clickOnLeftMenuEditorial__%26__linkClicked__%3D__%E5%8F%97%E8%B3%9E%E5%B1%A5%E6%AD%B4__%26__linkClickedId__%3D__%E5%8F%97%E8%B3%9E%E5%B1%A5%E6%AD%B4__%26__pageName__%3D__events">                受賞履歴</a>            </li>                    <li class=" ">                <a href="/events/スポーツ" data-gtm-parameters="event__%3D__clickOnLeftMenuEditorial__%26__linkClicked__%3D__%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%84__%26__linkClickedId__%3D__%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%84__%26__pageName__%3D__events">                スポーツ</a>            </li>                    <li class=" ">                <a href="/events/映画と音楽" data-gtm-parameters="event__%3D__clickOnLeftMenuEditorial__%26__linkClicked__%3D__%E6%98%A0%E7%94%BB__%26__linkClickedId__%3D__%E6%98%A0%E7%94%BB__%26__pageName__%3D__events">                映画</a>            </li>            </ul>    <div class="piaget-rwd">        <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>    </div>    <div class="row">                    <!--post-preview-side-bar--><a href="/events/sunlight-journey" class="span4 media-home lateral   ">    <div class="padded">        <div class="row">            <div class="span2">                <img class="picture ratio-16x9" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/75954/170/16x9/v11.jpg" alt="Sunlight Journeyサンライト・ジャーニーコレクション">            </div>            <div class="span2">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <div class="paragraph bottom">                    <div class="pull-left">                        <span class="date  ">17.06.22</span>                        <span class="category">                            インスティテューショナル イベント                        </span>                    </div>                </div>            </div>        </div>    </div></a>                    <!--post-preview-side-bar--><a href="/events/Altiplano-ウォッチ-60周年" class="span4 media-home lateral  media-video ">    <div class="padded">        <div class="row">            <div class="span2">                <img class="picture ratio-16x9" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/75317/170/16x9/v11.jpg" alt="Altiplano">            </div>            <div class="span2">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <div class="paragraph bottom">                    <div class="pull-left">                        <span class="date  ">17.05.26</span>                        <span class="category">                            インスティテューショナル イベント                        </span>                    </div>                </div>            </div>        </div>    </div></a>                    <!--post-preview-side-bar--><a href="/events/オリヴィア・パレルモ-possession" class="span4 media-home lateral   ">    <div class="padded">        <div class="row">            <div class="span2">                <img class="picture ratio-16x9" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/74367/170/16x9/v11.jpg" alt="オリヴィア・パレルモが表現するPossession">            </div>            <div class="span2">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <div class="paragraph bottom">                    <div class="pull-left">                        <span class="date  ">17.03.22</span>                        <span class="category">                            インスティテューショナル イベント                        </span>                    </div>                </div>            </div>        </div>    </div></a>            </div>        <div class="piaget-rwd">        <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>    </div>    <div class="row">                    <!--post-preview-side-bar--><a href="/events/Altiplano-ウォッチ-60周年" class="span4 media-home lateral  media-video ">    <div class="padded">        <div class="row">            <div class="span2">                <img class="picture ratio-16x9" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/75317/170/16x9/v11.jpg" alt="Altiplano">            </div>            <div class="span2">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <div class="paragraph bottom">                    <div class="pull-left">                        <span class="date  ">17.05.26</span>                        <span class="category">                            インスティテューショナル イベント                        </span>                    </div>                </div>            </div>        </div>    </div></a>                    <!--post-preview-side-bar--><a href="/events/sihh-2017-piaget-altiplano" class="span4 media-home lateral  media-video ">    <div class="padded">        <div class="row">            <div class="span2">                <img class="picture ratio-16x9" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/72532/170/16x9/v11.jpg" alt="アニバーサリーを称えて">            </div>            <div class="span2">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <div class="paragraph bottom">                    <div class="pull-left">                        <span class="date  ">17.01.16</span>                        <span class="category">                            インスティテューショナル イベント                        </span>                    </div>                </div>            </div>        </div>    </div></a>            </div>            <div class="piaget-rwd">            <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>        </div>        <div class="row sidebar-events--celebrities">                            <a href="/events/ジェシカ-チャステイン" class="span2">    <div class="padded">        <div class="row">            <div class="span2">ジェシカ・チャステイン</div>            <div class="span2 media-img-container ratio-16x9">                <img src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/56222/170/16x9/v11.jpg" alt="ジェシカ・チャステイン">            </div>        </div>    </div></a>                            <a href="/event/ライアン・レイノルズ" class="span2">    <div class="padded">        <div class="row">            <div class="span2">ライアン・レイノルズ</div>            <div class="span2 media-img-container ratio-16x9">                <img src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/73777/170/16x9/v11.jpg" alt="ライアン・レイノルズ">            </div>        </div>    </div></a>                            <a href="/events/オリヴィア・パレルモ" class="span2">    <div class="padded">        <div class="row">            <div class="span2">オリヴィア・パレルモ</div>            <div class="span2 media-img-container ratio-16x9">                <img src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/73781/170/16x9/v11.jpg" alt="オリヴィア・パレルモ">            </div>        </div>    </div></a>                            <a href="/events/マイケル-B-ジョーダン" class="span2">    <div class="padded">        <div class="row">            <div class="span2">マイケル・B・ジョーダン</div>            <div class="span2 media-img-container ratio-16x9">                <img src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/64025/170/16x9/v11.jpg" alt="マイケル・B・ジョーダン">            </div>        </div>    </div></a>                    </div>    </div>                        </div>                        <div class="span8 blog-content" data-nav-is-ajax-receiver="blog-layout-content">                                        <div class="piaget-rwd mt1">            <h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>        </div>                                        <div class="row  mt-gutter-demi-negative">                                        <div class="span8      ">                                        <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                            </div>                                            <div class="span8      ">                                        <!--com/blog/blocks/photoRectangle--><div class="row pt-gutter-demi pb-gutter-demi">    <div class="span8 ratio-16x9 " style="">        <iframe src="https://www.youtube.com/embed/0QZI7uVEKsU?wmode=opaque&amp;autohide=1&amp;rel=0&piaget_lang=ja&piaget_market=JP&siteVersion=desktop" allowfullscreen="" wmode="opaque" height="100%" frameborder="0" width="100%"></iframe>    </div></div>                            </div>                                            <div class="span8      ">                                        <p class="pb-gutter pt-gutter-demi pb-gutter-demi block-text block-rich-text">    <!--com/blog/blocks/text-richText-->    1957年、ピアジェは新しいエレガンスの基準となる極薄時計をリリースし、時計製造の世界に革命を起こしました。過去に例を見ない薄さとシンプルな文字盤で独特のルックを完成させ、時計製造の歴史にその名を残すウオッチとなりました。伝説的タイムピースの誕生です。アイコンというべきこのコレクションの誕生60周年を記念し、メゾン ピアジェは2017年を [hrefx]に捧げます。数量限定となるコレクションにはピアジェの創造性を象徴するカラフルな文字盤が採用され、ピアジェらしい美しさが際立つ新たなAltiplanoが誕生しました。</p>                            </div>                                            <div class="span4   offset2    ">                                        <!--text-lineBreak--><div class="pt-gutter pb-gutter">    <div class="bottom-line-light "></div></div>                            </div>                                                    </div>                        <div class="row  mt-gutter-demi-negative">                                        <div class="span8      ">                                        <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                            </div>                                            <div class="span4   offset2    ">                                        <!--text-lineBreak--><div class="pt-gutter pb-gutter">    <div class="bottom-line-light "></div></div>                            </div>                                            <div class="span3   offset1    ">                                    <div class="row">                        <a href="/ウォッチ/極薄デイトウォッチイエローゴールド-g0a42052" class="span3            product-item            carousel-caption-hover            clearfix            mb-gutter-demi            mt-gutter-demi            ">    <img src="http://static.piaget.com/pub/media/cache/img_product/previewSpan/2942/3/black/1487667433v7.jpg" alt="イエローゴールド製極薄デイトウォッチ - ピアジェの高級時計 G0A42052">            <div class="details-container">            <div class="details color-light">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <p class="description2">極薄ウォッチ、自動巻、イエローゴールド</p>            </div>        </div>    </a>                    </div>                            </div>                                            <div class="span3      ">                                        <!--com/blog/blocks/photoRectangle--><div class="photo-rectangle-item">    <img            class="pt-gutter-demi pb-gutter-demi"            src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/75327/270/auto/v11.jpg"            alt=""        >    </div>                            </div>                                            <div class="span8      ">                                        <div style="height: 0px;">&nbsp;</div>                            </div>                                            <div class="span3   offset1    ">                                        <!--com/blog/blocks/photoRectangle--><div class="photo-rectangle-item">    <img            class="pt-gutter-demi pb-gutter-demi"            src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/75329/270/auto/v11.jpg"            alt="Altiplano ウォッチを身に着けたフー・ゴー"        >    </div>                            </div>                                            <div class="span3      ">                                    <div class="row">                        <a href="/ウォッチ/極薄デイトウォッチホワイトゴールド-g0a42050" class="span3            product-item            carousel-caption-hover            clearfix            mb-gutter-demi            mt-gutter-demi            ">    <img src="http://static.piaget.com/pub/media/cache/img_product/previewSpan/2938/3/black/1487667331v7.jpg" alt="ホワイトゴールド製極薄デイトウォッチ - ピアジェの高級時計 G0A42050">            <div class="details-container">            <div class="details color-light">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <p class="description2">極薄ウォッチ、自動巻、ホワイトゴールド</p>            </div>        </div>    </a>                    </div>                            </div>                                            <div class="span8      ">                                        <div style="height: 0px;">&nbsp;</div>                            </div>                                            <div class="span3   offset1    ">                                    <div class="row">                        <a href="/ウォッチ/極薄機械式ウォッチホワイトゴールド-g0a42109" class="span3            product-item            carousel-caption-hover            clearfix            mb-gutter-demi            mt-gutter-demi            ">    <img src="http://static.piaget.com/pub/media/cache/img_product/previewSpan/2950/3/black/1487667852v7.jpg" alt="ホワイトゴールド製極薄機械式ウォッチ - ピアジェの高級時計 G0A42109">            <div class="details-container">            <div class="details color-light">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <p class="description2">極薄ウォッチ、機械式、ホワイトゴールド</p>            </div>        </div>    </a>                    </div>                            </div>                                            <div class="span3      ">                                        <!--com/blog/blocks/photoRectangle--><div class="photo-rectangle-item">    <img            class="pt-gutter-demi pb-gutter-demi"            src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/75331/270/auto/v11.jpg"            alt=""        >    </div>                            </div>                                            <div class="span8      ">                                        <div style="height: 0px;">&nbsp;</div>                            </div>                                            <div class="span3   offset1    ">                                        <!--com/blog/blocks/photoRectangle--><div class="photo-rectangle-item">    <img            class="pt-gutter-demi pb-gutter-demi"            src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/75333/270/auto/v11.jpg"            alt=""        >    </div>                            </div>                                            <div class="span3      ">                                    <div class="row">                        <a href="/ウォッチ/極薄自動巻ウォッチホワイトゴールド-g0a42105" class="span3            product-item            carousel-caption-hover            clearfix            mb-gutter-demi            mt-gutter-demi            ">    <img src="http://static.piaget.com/pub/media/cache/img_product/previewSpan/2946/3/black/1487667579v7.jpg" alt="ホワイトゴールド製極薄自動巻ウォッチ - ピアジェの高級時計 G0A42105">            <div class="details-container">            <div class="details color-light">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <p class="description2">極薄ウォッチ、自動巻、ホワイトゴールド</p>            </div>        </div>    </a>                    </div>                            </div>                                            <div class="span8      ">                                        <!--text-lineBreak--><div class="pt-gutter pb-gutter">    <div class="bottom-line-light "></div></div>                            </div>                                                    </div>                        <div class="row  mt-gutter-demi-negative">                                        <div class="span8      ">                                        <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                            </div>                                            <div class="span6   offset1    ">                                    <div class="row">                        <a    href="/ウォッチ/altiplano"    class="span6            collection-item            carousel-caption-hover            clearfix            mt2            ">    <img src="http://static.piaget.com/pub/media/cache/img_piaget/sized/media-slash-collections-slash-Piaget_540x350_Altiplano-dot-jpg/570/369/noBorder/000000/jpg/v6.jpg">    <div class="details-container">        <div class="details color-light">            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>            <p class="description2">極薄の技術</p>            <p><div class="pull-right secondary-link">続きを読む</div></p>        </div>    </div></a>                    </div>                            </div>                                            <div class="span8      ">                                        <!--text-lineBreak--><div class="pt-gutter pb-gutter">    <div class="bottom-line-light "></div></div>                            </div>                </div><div class="post-properties mt2">            <div class="properties mb1">            <div class="property">                <span class="property-label">タグ : </span>                                [hrefx][hrefx][hrefx][hrefx][hrefx]                                [hrefx][hrefx][hrefx][hrefx]                            </div>        </div>        <span class="date  ">        17.05.26    </span>    <a class="category" href="/events/インスティテューショナル-イベント">        インスティテューショナル イベント    </a></div>                        </div>                                </div>        </div>    </div></div>        <div class="piaget-rwd bg-white noprint" id="container_related_posts">        <div class="container pdgv">            <h4 class="heading heading--center mrgb+">                [hrefx][hrefx][hrefx][hrefx][hrefx]            </h4>            <div id="reel_related_posts" class="reel">                <button class="reel__previous btn btn--bare btn--disabled" data-navigate="previous" title="前へ" role="presentation">                    <svg class="ico ico--chevron-left">                        <use xlink:href="#chevron-left" />                    </svg>                </button>                <div class="reel__body">                    <div class="reel__roll grid">                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/ピアジェ-ローズ-ジュエリー">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/52897/170/16x9/v11.jpg" alt="ピアジェ ローズ – ピアジェ ニュース＆イベント">        <h6>Piaget Rose</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/ピアジェ-エクセプショナルウォッチ">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/52943/170/16x9/v11.jpg" alt="ピアジェ エクセプショナル ウォッチ-ピアジェ-ニュース＆イベント">        <h6>エクセプショナル ピース</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/2011年度高級時計展覧会">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/43680/170/16x9/v11.jpg" alt="2011年度高級時計展覧会 ― ピアジェ ニュース＆イベント">        <h6>2011年度高級時計展覧会</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/モナコ レディースランチ">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/46396/170/16x9/v11.jpg" alt="レディースランチ ― ピアジェ ニュース＆イベント">        <h6>レディース・ランチ</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/チューリッヒのピアジェのブティック">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/43296/170/16x9/v11.jpg" alt="チューリッヒにピアジェが上陸 ― ピアジェ ニュース＆イベント">        <h6>チューリッヒにピアジェが上陸</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/国際時計見本市2012">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/45044/170/16x9/v11.jpg" alt="2012年SIHH（国際時計見本市） – ピアジェ ニュース＆イベント">        <h6>SIHH 2012</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/シンガポール-ultra-thin展">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/42776/170/16x9/v11.jpg" alt="シンガポールにてUltra-Thin展 – ピアジェ ニュース＆イベント">        <h6>シンガポールでのMaster of Ultra-Thin展</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/ピアジェ ブティック-パリ-ギャラリー-ラファイエット">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/42680/170/16x9/v11.jpg" alt="パリのギャラリー・ラファイエット ピアジェ ブティック– ピアジェ ニュース＆イベント">        <h6>パリのギャラリー・ラファイエットにピアジェ ブティック</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/ピアジェがボリビアのアルティプラノ高原に">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/7838/170/16x9/v11.jpg" alt="ピアジェがボリビアのアルティプラノ高原に - ピアジェ イベント&ニュース">        <h6>ピアジェがボリビアのアルティプラノ高原に</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/ミシェル・チェン-ロサンゼルスにて">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/42668/170/16x9/v11.jpg" alt="ミシェル・チェン ロサンゼルスにて - ピアジェ イベント&ニュース">        <h6>ミシェル・チェン ロサンゼルスにて</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/台中top-city-ピアジェ-ブティック">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/43378/170/16x9/v11.jpg" alt="台湾にピアジェ ブティック – ピアジェ ニュース＆イベント">        <h6>台湾のピアジェ ブティック</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/voyage-to-piageフェア">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/7774/170/16x9/v11.jpg" alt="Voyage To Piaget フェア – ピアジェ ニュース＆イベント">        <h6>Voyage To Piaget</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/piaget-roseプレスローンチ">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/52929/170/16x9/v11.jpg" alt="Piaget Roseプレスローンチ - ピアジェ イベント&ニュース">        <h6>Piaget Roseプレスローンチ</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/ピアジェ-ローズ-日本">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/7930/170/16x9/v11.jpg" alt="ピアジェ ローズが日本で販売開始 – ピアジェ ニュース＆イベント">        <h6>ピアジェ ローズ新作発表会 （4月19日開催）</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/ジュエリーの魔力展">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/45256/170/16x9/v11.jpg" alt="ジュエリーの魔力展 – ピアジェ ニュース＆イベント">        <h6>ジュエリーの魔力</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/台湾での「ピアジェ-ローズ」発表会">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/7396/170/16x9/v11.jpg" alt="台湾での「ピアジェ ローズ」発表会 - ピアジェ イベント&ニュース">        <h6>台湾での「ピアジェ ローズ」発表会</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/ジュネーブ-ブティック-リニューアルオープン">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/52907/170/16x9/v11.jpg" alt="ジュネーブ ブティック リニューアルオープン – ピアジェ ニュース＆イベント">        <h6>ジュネーブのピアジェ ブティックがリニューアルオープン</h6>    </a></div>                                                    <div class="reel__item grid__item w-1/6"  >    <a href="/events/シャトー-ド-マルメゾン">        <img class="reel-product-tile--media reel__item-img" src="http://static.piaget.com/pub/media/cache/img_piaget/photoRect/7104/170/16x9/v11.jpg" alt="シャトー・ド・マルメゾン-ピアジェ ニュース&イベント">        <h6>シャトー・ド・マルメゾン</h6>    </a></div>                                            </div>                </div>                <button class="reel__next btn btn--bare" data-navigate="next" title="次へ" role="presentation">                    <svg class="ico ico--chevron-right">                        <use xlink:href="#chevron-right" />                    </svg>                </button>            </div>        </div>    </div>        </div>    </div>        <div id="fixed-footer" class="fixed-footer noprint" data-fixed-footer="true" >        <!-- Sometimes we do not need footer so we check if there is one-->                <div class="countries-footer color-light noprint">            <div class="container">            </div>        </div>        <div id="fixed-footer-bar" class="ui noprint" role="navigation">                        <div class="js-fixed-footer-slides">                <div class="mask">                                        <div class="js-slide noprint countries-footer color-light" data-js-slide="countries">                        <button type="button" title="Close" class="close" data-footer-action="close"><i class="icon-piaget-close"></i></button>                        <div class=container>                            <div class="row noprint">        <div class="span10 offset1 pt1">        <div class="row">            <div class="span2">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <div class="list-countries padded divider-right" data-stat-event-call="change-country">                    <ul class="text-menu list-center">                        <li>                            <a class=" langSelector link-to-domain-243" href="http://www.piaget.com/events/altiplano-60th-anniversary" title="English"                                lang="en" hreflang="en-US">                                <span data-text="United States" data-text-en="United States">piaget luxury watches and jewelry</span>                                                                    <i class="icon-piaget-text-shop-bag"></i>                                                            </a>                        </li>                    </ul>                </div>            </div>            <div class="span2">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <div class="list-countries padded divider-right" data-stat-event-call="change-country">                    <ul class="text-menu list-center">                        <li>                            <a class=" langSelector link-to-domain-3" href="http://www.piaget.fr/events/60e-anniversaire-altiplano" title="Français" lang="fr" hreflang="fr">                                <span data-text="France" data-text-en="France">piaget montres de luxe et joaillerie</span>                                                                    <i class="icon-piaget-text-shop-bag"></i>                                                            </a>                        </li>                        <li>                            <a class=" langSelector country-en-uk link-to-domain-246" href="http://en.piaget.com/events/altiplano-60th-anniversary?uk=1" title="English" lang="en" hreflang="en-GB">                                <span data-text="United Kingdom"  data-text-en="United Kingdom">piaget luxury watches and high-end jewellery</span>                                                                    <i class="icon-piaget-text-shop-bag"></i>                                                            </a>                        </li>                        <li>                            <a class=" langSelector link-to-domain-9" href="http://www.piaget.de/events/altiplano-60-Geburtstag" title="Deutsch" lang="de" hreflang="de">                                <span data-text="Deutschland" data-text-en="Germany">piaget luxusuhr und –schmuck</span>                                                                    <i class="icon-piaget-text-shop-bag"></i>                                                            </a>                        </li>                        <li>                            <a class=" langSelector link-to-domain-11" href="http://www.piaget.es/events/altiplano-60-aniversario" title="Español" lang="es" hreflang="es">                                <span data-text="España" data-text-en="Spain">piaget relojes de lujo y joyería</span>                                                                    <i class="icon-piaget-text-shop-bag"></i>                                                            </a>                        </li>                                                <li>                            <a class=" langSelector country-en-eu link-to-domain-246" href="http://en.piaget.com/events/altiplano-60th-anniversary?uk=0" title="English" lang="en" hreflang="en-GB">                                <span data-text="Other Countries" data-text-en="European countries">piaget luxury watches and high-end jewellery</span>                                                                    <i class="icon-piaget-text-shop-bag"></i>                                                            </a>                        </li>                        <li class="spacer">                            <a class=" langSelector link-to-domain-5" href="http://fr.piaget.ch/events/60e-anniversaire-altiplano" title="Français" lang="fr" hreflang="fr-CH">                                <span data-text="Suisse" data-text-en="Switzerland FR">piaget montres de luxe et haute joaillerie</span>                                                            </a>                            &nbsp;/                            <a class=" langSelector link-to-domain-7" href="http://www.piaget.ch/events/altiplano-60-Geburtstag" title="Deutsch" lang="de" hreflang="de-CH">                                <span data-text="Schweiz" data-text-en="Switzerland DE">piaget luxusuhren und –schmuck</span>                                                            </a>                        </li>                        <li>                            <a class=" langSelector link-to-domain-13" href="http://ru.piaget.com/events/60-летие-коллекции-altiplano" title="Русский" lang="ru" hreflang="ru">                                <span data-text="Россия" data-text-en="Russia">Швейцарские часы и ювелирные украшения piaget</span>                                                            </a>                        </li>                    </ul>                </div>            </div>            <div class="span2">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <div class="list-countries padded divider-right" data-stat-event-call="change-country">                    <ul class="text-menu list-center">                        <li>                            <a class=" langSelector link-to-domain-15" href="http://www.piaget.cn/pageurl/international/1505897" title="简体中文" lang="zh-Hans" hreflang="zh-Hans">                                <span data-text="中国" data-text-en="China">伯爵奢华钟表与珠宝</span>                                                                    <i class="icon-piaget-text-shop-bag"></i>                                                            </a>                        </li>                        <li>                            <a class=" langSelector link-to-domain-17" href="http://www.piaget.com.hk/events/altiplano-60th-anniversary" title="繁體中文" lang="zh-Hant" hreflang="zh-Hant">                                <span data-text="香港" data-text-en="Hong Kong">伯爵奢華鐘錶與珠寶</span>                                                            </a>                        </li>                        <li>                            <a class=" langSelector link-to-domain-21" href="http://www.piaget.tw/events/altiplano-60th-anniversary" title="繁體中文" lang="zh-Hant" hreflang="zh-Hant-TW">                                <span data-text="台灣" data-text-en="Taiwan">Piaget奢華鐘錶與珠寶</span>                                                            </a>                        </li>                        <li>                            <a class="active langSelector link-to-domain-23" href="http://www.piaget.jp/events/Altiplano-ウォッチ-60周年" title="日本語" lang="ja" hreflang="ja">                                <span data-text="日本" data-text-en="Japan">高級宝飾時計ブランド ピアジェ</span>                                                            </a>                        </li>                        <li>                            <a class=" langSelector link-to-domain-33" href="http://www.piaget.kr/events/altiplano-60th-anniversary" title="한국어" lang="ko" hreflang="ko">                                <span data-text="대한민국" data-text-en="South Korea">피아제 고급 시계 및 주얼리</span>                                                            </a>                        </li>                    </ul>                </div>            </div>            <div class="span2">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <div class="list-countries padded divider-right" data-stat-event-call="change-country">                    <ul class="text-menu list-center">                        <li>                            <a class=" langSelector link-to-domain-29" href="http://www.piaget.ae/events/altiplano-60th-anniversary" title="عربي" lang="ar" hreflang="ar">                                <span data-text="الشرق الأوسط" data-text-en="Middle East">مجوهرات وساعات بياجيه الفاخرة </span>                                                            </a>                        </li>                        <li>                            <a class=" langSelector link-to-domain-31" href="http://int.piaget.com/events/altiplano-60th-anniversary?me=1" title="English" lang="en" hreflang="en">                                <span data-text="Middle East" data-text-en="Middle East">piaget luxury watches and high-end jewellery</span>                                                            </a>                        </li>                    </ul>                </div>            </div>            <div class="span2">                <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                <div class="list-countries padded" data-stat-event-call="change-country">                    <ul class="text-menu list-center">                        <li>                            <a class=" langSelector link-to-domain-31" href="http://int.piaget.com/events/altiplano-60th-anniversary" title="English" lang="en" hreflang="en">                                <span data-text="Other countries" data-text-en="International">piaget luxury watches and high-end jewellery</span>                                                            </a>                        </li>                    </ul>                </div>            </div>        </div>    </div></div>                        </div>                    </div>                                                        </div>            </div>                        <div class="ui-bar" >                <div class="container">                    <div class="left text-menu" itemscope itemtype="http://schema.org/BreadcrumbList">                                                                                                                                        <span                                    itemprop="itemListElement"                                    itemscope                                    itemtype="http://schema.org/ListItem"                                    class="itemscope">                                    <a                                        itemprop="item"                                        href="/"                                        class=""                                        >                                        <span itemprop="name">Piaget</span>                                    </a>                                    <meta itemprop="position" content="1" />                                </span>                                                                                                                                            <span                                    itemprop="itemListElement"                                    itemscope                                    itemtype="http://schema.org/ListItem"                                    class="itemscope">                                    <a                                        itemprop="item"                                        href="/events"                                        class=""                                        >                                        <span itemprop="name">イベント</span>                                    </a>                                    <meta itemprop="position" content="2" />                                </span>                                                                                                                                            <span                                    itemprop="itemListElement"                                    itemscope                                    itemtype="http://schema.org/ListItem"                                    class="itemscope">                                    <a                                        itemprop="item"                                        href="/events/インスティテューショナル-イベント"                                        class=""                                        >                                        <span itemprop="name">インスティテューショナル イベント</span>                                    </a>                                    <meta itemprop="position" content="3" />                                </span>                                                                                                                                            <span                                    itemprop="itemListElement"                                    itemscope                                    itemtype="http://schema.org/ListItem"                                    class=""                                    >                                    Altiplano                                </span>                                                                        </div>                    <div class="right text-menu">                                                                            <a  data-nav-ajax-href='/popin_relationship/newsletter/popin'  data-nav-ajax-receiver='popin'  data-nav-ajax-stats='email-newsletter'  href="/ニュースレター">ニュースレター</a>                            <span class="little-right-divider"></span>                                                                        <a  data-nav-ajax-href='/popin_relationship/contact/popin'  data-nav-ajax-receiver='popin'  data-nav-ajax-stats='email-contact'  href="/コンタクト">コンタクト</a>                        <span class="little-right-divider"></span>                                                <span class="itemscope" id="current-country">                            <a href="#"                               data-js-slide-toggler="countries">                                Country: <span class="value"><strong>日本</strong></span>                            </a>                        </span>                                                                    </div>                </div>            </div>        </div>        <div class="footer noprint" role="navigation">    <div class="container">        <div class="row">            <div class="span3">                <div class="padded divider-right">                    <ul class="text-menu list-center">                                                <li>                            <a class=""   href="/ウォッチ">ウォッチ</a>                        </li>                                                <li>                            <a class=""   href="/ジュエリー">ジュエリー</a>                        </li>                                                <li>                            <a class=""   href="/ハイジュエリー">ハイジュエリー</a>                        </li>                                                <li>                            <a class=""   href="/ウェディング">ウエディング</a>                        </li>                                                <li>                            <a class=""   href="/店舗検索">店舗検索</a>                        </li>                                            </ul>                </div>            </div>            <div class="span3">                <div class="padded divider-right">                    <ul class="text-menu list-center">                                                <li>                            <a class=""   href="/ブランドの歴史">ブランドの歴史</a>                        </li>                                                <li>                            <a class=""   href="/クラフツマンシップ">クラフツマンシップ</a>                        </li>                                                <li>                            <a class=""   href="/ムーブメント">ムーブメント</a>                        </li>                                            </ul>                </div>            </div>            <div class="span3">                <div class="padded divider-right">                    <ul class="text-menu list-center">                                                    <li>                                <a class="active"   href="/events">Piaget Society</a>                            </li>                                                    <li>                                <a class=""   href="/マガジン-カタログ">マガジン＆カタログ</a>                            </li>                                                    <li>                                <a class=""   href="https://pressnews.piaget.com">プレス</a>                            </li>                                            </ul>                </div>            </div>            <div class="span3">                <div class="padded">                    <ul class="text-menu list-center">                                                <li>                            <a class=""   href="/カスタマー・サービス">サービス</a>                        </li>                                                <li>                            <a class=""   href="/企業理念">企業理念</a>                        </li>                                                <li>                            <a class=""   href="/recruitment">CAREERS</a>                        </li>                                                <li>                            <a class=""  data-nav-ajax-href='/popin_relationship/contact/popin'  data-nav-ajax-receiver='popin'  data-nav-ajax-stats='email-contact'   href="/コンタクト">コンタクト</a>                        </li>                                            </ul>                </div>            </div>        </div>        <div class="social-footer">    <ul>                <li>            <a class="no-ga" href="http://www.facebook.com/Piagetjapan" data-social-network="Facebook" target="_blank">                <i class="icon-piaget-social-fb"></i>                <span style="display: none">Facebook</span>            </a>        </li>                <li>            <a class="no-ga" href="http://www.twitter.com/Piaget" data-social-network="Twitter" target="_blank">                <i class="icon-piaget-social-twitter"></i>                <span style="display: none">Twitter</span>            </a>        </li>                <li>            <a class="no-ga" href="http://www.youtube.com/Piaget" data-social-network="Youtube" target="_blank">                <i class="icon-piaget-social-yt"></i>                <span style="display: none">Youtube</span>            </a>        </li>                <li>            <a class="no-ga" href="http://j.mp/Piaget-GooglePlus" data-social-network="Google +" target="_blank">                <i class="icon-piaget-social-google"></i>                <span style="display: none">Google +</span>            </a>        </li>                <li>            <a class="no-ga" href="http://pinterest.com/piagetbrand/" data-social-network="Pinterest" target="_blank">                <i class="icon-piaget-social-pinterest"></i>                <span style="display: none">Pinterest</span>            </a>        </li>                <li>            <a class="no-ga" href="https://foursquare.com/piaget" data-social-network="Foursquare" target="_blank">                <i class="icon-piaget-social-foursquare"></i>                <span style="display: none">Foursquare</span>            </a>        </li>                <li>            <a class="no-ga" href="http://instagram.com/piaget" data-social-network="Instagram" target="_blank">                <i class="icon-piaget-social-instagram"></i>                <span style="display: none">Instagram</span>            </a>        </li>            </ul></div>                <div class="corporate-footer noprint mb2" role="contentinfo">    <ul>                    <li class="child0 ">                <a  href="/">© Piaget 2017 <span class="version-number">(9.0.89)</span></a> <i class=""></i>            </li>                    <li class="child1 ">                <a  data-nav-ajax-href='/popin_relationship/termsAndConditions/popin'  data-nav-ajax-receiver='popin'  data-nav-ajax-stats='open-terms'  href="/ご利用-条件">ご利用条件</a> <i class="icon-piaget-bullet"></i>            </li>                    <li class="child2 ">                <a  data-nav-ajax-href='/popin_relationship/conditionsOfSales/popin'  data-nav-ajax-receiver='popin'  data-nav-ajax-stats='open-cgv'  href="/blog/post/4398">販売規約</a> <i class="icon-piaget-bullet"></i>            </li>                    <li class="child3 ">                <a  data-nav-ajax-href='/popin_relationship/privacyPolicy/popin'  data-nav-ajax-receiver='popin'  data-nav-ajax-stats='open-privacy'  href="/プライバシー・ポリシー-日本">プライバシー ポリシー</a> <i class="icon-piaget-bullet hidden-phone"></i>            </li>                    <li class="child4 hidden-phone">                <a  href="/watches-jewelry/index">サーチガイド</a> <i class="icon-piaget-bullet"></i>            </li>                    <li class="child5 hidden-phone">                <a  href="/サイトマップ">サイトマップ</a> <i class=""></i>            </li>                    </ul></div>    </div></div>    </div>            <div class="fixed-right-share-nav noprint piaget-rwd">    <!-- first use .share nav class on a div-->    <div class="share-nav btn--overlay" data-stat-event-call="share"         data-stat-event-category = "share">        <!-- add another div without any class-->        <div>                            <a href="#" data-share-network="Facebook">                    <i class="icon-piaget-share-fb"></i>                    <span style="display: none">Facebook</span>                </a>                            <a href="#" data-share-network="Twitter">                    <i class="icon-piaget-share-twitter"></i>                    <span style="display: none">Twitter</span>                </a>                            <a href="#" data-share-network="Google">                    <i class="icon-piaget-share-google"></i>                    <span style="display: none">Google Plus</span>                </a>                            <a href="#" data-share-network="Pinterest">                    <i class="icon-piaget-share-pinterest"></i>                    <span style="display: none">Pinterest</span>                </a>                    </div>    </div></div>        <div class="pop-in-layout">        <div class="bg"></div>        <div id="pop-in-container" class="color-light">                        <div class="js-pop-in">                <div class="row">                    <div class="span4">                        <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                        <div class="row">                            <div class="span2 phone-3-cols">                            <a class="btn bouton-light btn-full" data-pop-in-action='hide'>no</a>                            </div>                            <div class="span2 phone-3-cols pull-right-phone right-m-30-responsive">                            <a class="btn bouton-black btn-full" data-ui-dialog-action='return-data'>yes</a>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div><script src="http://static.piaget.com/pub/media/cache/js/js-combine-2017-07-21-12-02-25-e821a296c599514fc47eb47f9b3f5a5c.js?CuBEIrtFaIRANnSecyKBJBdEL12yvmqlqk9hVa7pjcNR699t3LxBpNXlRmBA9njjsuh6Q8BbkrbCBgPk7119w" integrity="sha512-CuBEIrtFaIRANnSecyKBJBdEL12yvmqlqk9hVa7pjcNR699t3LxBpNXlR/mBA9njjsuh6Q8BbkrbCBgPk7119w==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/app/api/JQ.js?vkG7dFPace4jryZu3yksnTdn8kwiEZSG9yrS6orDlUQQzRrG22kwgTHneOFWotrC3JxoFIbEfEfGHSziSHLug" integrity="sha512-vkG7dFPace4jryZu3yksnTdn8kwiEZSG9yrS6orDlUQQzRrG22kwgTHneOFWotrC3JxoFIbEfE+fGHSziSHLug==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/app/api/Model.js?ApM6C0hHHyYov4TeGRSLDGcBomDNZrdq1FK5jwbxFNZnhFofYfAO42aJ2K2eP31H8XMgOZgKcga6e87DQ" integrity="sha512-ApM/+6C0hHHyYov4TeGRSLDGcBomDNZrdq1FK5+jwbxFNZnhFofYfAO42aJ2K2eP31H8XMgO+ZgKcga6+e87DQ==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/app/ecommerce/js/EcommerceCommon.js?f5FKO5K55qH8NpDUxzJFBiXip5XgQqY5wQcJ9ouoVCMAZ7K1uXoUaMpbhaVa3uXpOZEIP1J0g8UJk37JAulQ" integrity="sha512-f5FKO5K55qH8NpDUxzJFBiXip5XgQqY5wQcJ9o/uoVCMAZ7K1uXoUaMpbhaVa3uXpOZEIP1J0g8UJk3/7JAulQ==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/app/ecommerce/js/EcommerceCommonFunctions.js?yCpzUtFwGyocR8WguqIbkdcKL7ENHzKLvy0aUEcRWee3Tb6UmhsSx5yXMdDUILHxcYnsRZeLPudBSZ3mCakyA" integrity="sha512-yCpzUtFwGyocR8WguqIb+kdcKL7ENHzKLvy0aUEcRWee3Tb6UmhsSx5yXMdDUILHxcYnsRZeLPudBSZ3mCakyA==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/app/ecommerce/js/WishLists.js?sGIJxCWs5PE1SOBgKMUG9uGDb8nU632bouER37Ckq9av6VlE7ixF3lU0gwoENKwLVCJdthAIjUMXd4vNwpqA" integrity="sha512-sGIJxCWs5PE1SOBgKMUG9uGDb8nU632/bouER37Ckq9av6VlE7i/xF3lU0gwoENKwLVCJdthAIjUMXd4vNwpqA==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/app/ecommerce/js/ShoppingBag.js?Oou4SddPofTK3BFP05AiQ6RDgqs4jyz8iq7hgx0xB6yQjfJhn7Pp2KWCpyNzljREIyq8MqnYsgNfkZsRcKQ" integrity="sha512-Oou4SddPofT+K3BFP05AiQ6RDgqs4j/yz8iq7hgx0xB6yQjfJhn7Pp2KWCpyNzljREIyq8MqnYsgN/fkZsRcKQ==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/app/ecommerce/js/QuickMenu.js?XoQCwXVnQfI4IRRnF67dtU1mQYXp9dvdkVfFB9QyUjrwt0ozo8vbkmHboNj4WfGc12WBBbcTB0qb8y4g" integrity="sha512-XoQCwXVnQfI4IR/Rn/F67d+tU1mQYXp9dvdk/VfFB9Qy+Ujrwt0ozo8vbkmHboNj4WfGc12WBBbcTB0qb+8y4g==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/app/ecommerce/js/ApplicationEcommerce.js?HcrZIcYf6V4yUWcckmfSYHbzG67NHIbEztFjfp2w7zOBptV8Bkvvqn7QjsrrBaAu1sdUtL4bFQ1d5CaGXBw" integrity="sha512-HcrZIcYf6V4yUWcckm/fSYHbzG67/NHIbEztFjfp2w7zOBptV8Bkvvqn7QjsrrBaA+u1sdUtL4bFQ1d5CaGXBw==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/app/ecommerce/js/StrapSizeSelector.js?uEtpj4g839t3twb541s6yh0Lz7ebfBfFvmB1zicRLHMDw3GGONRWnU86OPfnvOptvyTDH1hPRyO6quU0FKw" integrity="sha512-uEtpj4g8/39t3twb541s6yh0Lz7ebfBfFvmB1zicRLHMDw3GGONRWnU86OPfnvOptvyTDH/1hPRyO6quU0/FKw==" crossorigin="anonymous" ></script><script src="http://static.piaget.com/pub/app/ecommerce/js/UserMessage.js?LLC1gdwkTRmMq7MVB0YM2ZmQjR2MyF81iSpkO5E2Y8iwdVcVHUea5rCiP82ACEwypDTan3XeDZYiwtN7mD6zw" integrity="sha512-LLC1gdwkTRmMq7MVB0YM/2ZmQjR2MyF81iSpkO5E2Y8iwdVcVHUea5rCiP82ACEwypDTan3XeDZYiwtN7mD6zw==" crossorigin="anonymous" ></script><script>Nav.rootUrl="/";    ShoppingBag.urls.add = '/shoppingbag/addProduct';    WishLists.urls.addProduct = '/wishlist/wishlistAddReference';Nav.ecommerceActive = false;var Translation = {"main_navigation_js_do_you_want_mobile_version":"\u30d4\u30a2\u30b8\u30a7\u306e\u30e2\u30d0\u30a4\u30eb\u7248\u30b5\u30a4\u30c8\u306b\u79fb\u52d5\u3057\u307e\u3059\u304b\uff1f","main_navigation_js_do_you_want_desktop_version":"\u30d4\u30a2\u30b8\u30a7\u306e\u30d1\u30bd\u30b3\u30f3\u7248\u30b5\u30a4\u30c8\u306b\u79fb\u52d5\u3057\u307e\u3059\u304b\uff1f","Product.added to shopping bag":"Add to bag","Product.adding to shopping bag":"adding to shopping bag","Product.removed from shopping bag":"removed from shopping bag","Product.Please select a size":"Please select a size","Product.In stock":"In stock","Product.Please enter your size":"Please enter your size","Product.Out of stock":"Out of stock","Product.Available":"Available","Product.Not Available":"Not Available","Ebiza.character left":"character left","Ebiza.characters left":"characters left","Product.The price is not available":"The price is not available","Product.size between":"size between","Product.Please fill in all required fields":"Please fill in all required fields","Product.Please check the privacy policy and the conditions of sales":"Please check the privacy policy and the conditions of sales","Product.shopping bag same watch pieces":"shopping bag same watch pieces","Product.shopping bag same jewellery pieces":"shopping bag same jewellery pieces","Product.Are you sure you want to delete this product":"Are you sure you want to delete this product","Product.please select your wishlist":"please select your wishlist","Ebiza.Do you want remove the gift message?":"Do you want remove the gift message?","Product.please select fit preference":"please select fit preference","Ebiza.Please fill in correctly all the mandatory fields":"Please fill in correctly all the mandatory fields","Ebiza.Some of the information you have provided is incomplete":"\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u3066\u3044\u308b\u9805\u76ee\u3092\u3054\u78ba\u8a8d\u3044\u305f\u3060\u304d\u3001\u60c5\u5831\u304c\u6b63\u3057\u304f\u5165\u529b\u3055\u308c\u3066\u3044\u308b\u304b\u304a\u78ba\u304b\u3081\u304f\u3060\u3055\u3044\u3002\u3054\u8cea\u554f\u3084\u3054\u4e0d\u660e\u306a\u70b9\u7b49\u306f\u3001\u30d4\u30a2\u30b8\u30a7\u30ab\u30b9\u30bf\u30de\u30fc\u30c7\u30b9\u30af0120-73-1874 \u307e\u3067\u304a\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\u3002","Product.Please choose a font for your message":"Please choose a font for your message","Ebiza.paymentSuccess":"paymentSuccess","Ebiza.paymentLoading":"paymentLoading","Order.ConfirmMessageRemoveGiftMessage":"Do you want to remove the gift message?","MyAccount.LoadingMessageDefault":"LoadingMessageDefault","MyAccount.ErrorMessageFillMandatoryFields":"\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u3066\u3044\u308b\u9805\u76ee\u3092\u3054\u78ba\u8a8d\u3044\u305f\u3060\u304d\u3001\u60c5\u5831\u304c\u6b63\u3057\u304f\u5165\u529b\u3055\u308c\u3066\u3044\u308b\u304b\u304a\u78ba\u304b\u3081\u304f\u3060\u3055\u3044\u3002\u3054\u8cea\u554f\u3084\u3054\u4e0d\u660e\u306a\u70b9\u7b49\u306f\u3001\u30d4\u30a2\u30b8\u30a7 \u30b3\u30f3\u30bf\u30af\u30c8\u30bb\u30f3\u30bf\u30fc0120-73-1874 \u307e\u3067\u304a\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\u3002","MyAccount.ConfirmMessageDefault":"ConfirmMessageDefault","Ebiza.ReadMore":"ReadMore","message.error":"\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u30a8\u30e9\u30fc\u304c\u7d9a\u304f\u5834\u5408\u306b\u306f\u3001webmaster.piaget@piaget.com\u307e\u3067\u3001\u3054\u9023\u7d61\u304f\u3060\u3055\u3044\u3002","MyAccount.LoadingMessageUpdatingAccount":"\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u66f4\u65b0\u4e2d\u3067\u3059\u3002\u3057\u3070\u3089\u304f\u304a\u5f85\u3061\u304f\u3060\u3055\u3044\u3002","MyAccount.ConfirmMessageAccountSuccessUpdated":"\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u66f4\u65b0\u3044\u305f\u3057\u307e\u3057\u305f\u3002","MyAccount.WishlistRemoveProductConfirmMessage":"\u3053\u306e\u88fd\u54c1\u3092\u30a6\u30a3\u30c3\u30b7\u30e5\u30ea\u30b9\u30c8\u304b\u3089\u6d88\u53bb\u3057\u3066\u3088\u308d\u3057\u3044\u3067\u3059\u304b\u3000\uff1f"};var Translations = function(){};Translations.translate = Translation;PiagetCom.init();$(function() {    UserAccount.init();    Piaget.fixActiveUkCountry();    Piaget.adaptFooterSize();});ApplicationEcommerce.init();// We need a document ready for iframe load (PIA-346 Voeux2015)$(function(){    $('.minisite-home > iframe').load(function () {        Gtm.trackIframeEvents(this);    });});</script><!----></body></html>