<!-- BaseURL:   http://oakley.com/ --><!-- SiteURL:   http://oakley.com/en/ --><!-- Subdomain: us --><!-- Locale:    en --><!-- Is Oakley: 1 --><!-- Region Cookie:  --><!-- Query String: cm_mmc=google-semsearch-_-G-BRD-Low-Sunglasses-Exact-_-U-Custom-_-%2Bcustom+%2Boakleys&amp;gclid=CKGghtPbtMoCFURmMgodOpgItw&amp;gclsrc=ds --><!-- Main Domain: oakley.com --><!-- Region Selected Cookie:  --><!-- Referrer: https://www.google.com/ --><!DOCTYPE html><!--[if lt IE 7]>      <html lang="[语言]" class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]--><!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]--><!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]--><!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]--><head>    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />    <meta http-equiv="Cache-control" content="public">    <meta http-equiv="Cache-Control" content="max-age=120"/>    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />    <meta name="viewport" id="viewportMeta" content="width=device-width, initial-scale=1, maximum-scale=1"><title>[metatags_title]</title><meta name="description" content="[metatags_description]" /><meta name="robots" content="index, follow, archive" /><meta name="dc.language" content="EN"><meta name="geo.position" content="33.67197;-117.64611"> <meta name="geo.placename" content="Lake Forest"> <meta name="geo.region" content="US-CA"><meta name="ICBM" content="33.67197,-117.64611" /><meta property="fb:app_id" content="" /><meta property="og:title" content="Oakley - Men&#039;s &amp;amp; Women&#039;s Sunglasses, Goggles, &amp;amp; Apparel" /><meta property="og:type" content="article" /><meta property="og:url" content="http://oakley.com/en/shop/custom" /><meta property="og:author" content="Oakley Inc." /><meta property="og:publisher" content="Oakley Inc." /><meta property="og:site_name" content="Oakley" /><meta property="og:description" content="" /><meta property="og:locale" content="en_US" />   <meta property="twitter:card" content="summary" />    <meta property="twitter:image" content="http://s3-us-west-1.amazonaws.com/com.oakley.general/seo/_800x600_crop_center-center/logo.png" />        <meta property="twitter:image:width" content="800">    <meta property="twitter:image:height" content="600">    <meta property="og:image" content="http://s3-us-west-1.amazonaws.com/com.oakley.general/seo/_800x600_crop_center-center/logo.png" />         <meta property="og:image:width" content="800" />    <meta property="og:image:height" content="600" />    <meta property="og:image:type" content="image/png" />  <meta property="twitter:site" content="@oakley" /><meta property="twitter:creator" content="@oakley" /><meta property="twitter:title" content="Oakley - Men&#039;s &amp;amp; Women&#039;s Sunglasses, Goggles, &amp;amp; Apparel" /><meta property="twitter:description" content="" /><meta property="twitter:url" content="http://oakley.com/en/shop/custom" /><link href='http://fonts.googleapis.com/css?family=Roboto+Condensed:700,400,italic,400,300|Open+Sans:300italic,600italic,300,600|Droid+Serif:400,400italic' rel='stylesheet' type='text/css' />		<link href="http://japan.oakley.com/images_common/favicon.ico" type="image/ico" rel="shortcut icon"/><link rel="stylesheet" type="text/css" href="/oce/css/custom-landing.css"/>    <!--[if lt IE 9]>    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>    <![endif]--><script src="/javascripts/jquery/jquery-1.4.2.min.js" type="text/javascript"></script><script src="/javascripts/jquery/plugins/jquery.ui.min.js" type="text/javascript"></script><script src="/javascripts/jquery/plugins/jquery.easing.1.3.js"></script><!--<link rel="stylesheet" href="css/animate.css"><script src="js/wow/wow.min.js" type="text/javascript"></script><script> new WOW().init();</script>--></head><body><script src="/__utm.js" type="text/javascript"></script><script type="text/javascript">  urchinTracker();</script><script>  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');  ga('create', 'UA-34467766-1', 'auto');  ga('send', 'pageview');</script><!-- BEGIN COREMETRICS SUPPORT --><script src="http://libs.coremetrics.com/eluminate.js" type="text/javascript"></script><script src="http://libs.coremetrics.com/configs/90316693.js" type="text/javascript"></script><script type="text/javascript" charset="utf-8">cmSetClientID("90316693", false, 'www75.oakley.com', 'jp.oakley.com');</script><script type="text/javascript" charset="utf-8">cmCreatePageviewTag("CUSTOM - Top","LP",null, null);</script><!-- END COREMETRICS --><div id="site-container"><!-- Header Include Here --><!-- <header class="wrapper-outer flush" id="header">  <div class="wrapper-inner">    <div class="container-fluid">  -->  <div id="global-header-dropdown">    <div class="button-container show-menu">      [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]   </div><!-- Empty div used to add padding to the top of the page on tablet / desktop --></div><div id="global-header-spacer"></div><!-- </div>End Wrapperner -->  <!-- </div>End Wrapper Outer --><!-- </header>End Header -->                                                              <!--	ページ上部プロモーションエリア    class banner で背景画像変更-->                      <section id="" class="wrapper-outer flush wrapper-banner">      <div class="wrapper-inner">        <div class="container-fluid">          <div class="row no-gutters">            <div class="banner" style="background-image: url('/oce/images/Customlanding-1400x560.jpg');">              <div class="ratio ratio5-2">                <div class="ratio-content">                  <div class="content-wrapper">                    <div class="content-group align-ct">                                          <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>                      <h1>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h1>                                                                                                                                          <a class="btn btn-default alt" href="#lineup" val="#lineup" role="button" onClick="javascript:ga('send', 'event', 'CUSTOMLP-TOP', 'CONTENT', 'main');">いますぐカスタマイズ <i class="fa fa-long-arrow-right" aria-hidden="true"></i></a>                                                                  </div>                  </div>                </div>              </div>            </div>          </div>        </div>      </div>    </section>                  <!--	ページ　ステップ説明-->  <section id="custom-steps">	<div class="wrapper-outer">		<div class="wrapper-inner">			<div class="row no-gutters">									<div class="triple">              <!--               <span style="font-size:18px">﻿﻿[hrefx]<br />[hrefx]</span><br />               ﻿＊商品発送に関して重要なお知らせとなりますので、ご注文前に必ずご確認ください。</span>              -->               					<h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>															<div class="col-md-4 step wow fadeInUp" data-wow-delay="30ms" data-wow-duration="1s" data-wow-offset="100">																		<img class="triple-arrow" src="/oce/images/right-arrow.png">												<img class="stepimg" width="35%" src="/oce/images/step1.gif" /><br>												<h4>サングラスを選ぶ</h4>						<p>カスタマイズするサングラスを選ぶ。</p>															  									<img class="triple-photo" src="/oce/images/custom-landing_style.jpg?mtime=20151221140337">																						</div>										<div class="col-md-4 step wow fadeInUp" data-wow-delay="200ms" data-wow-duration="1s" data-wow-offset="100">																		<img class="triple-arrow" src="/oce/images/right-arrow.png"> 												                                                <img class="stepimg" width="35%" src="/oce/images/step2.gif" /><br>												<h4>好みのパーツカラーを選ぶ</h4>						<p>選んだサングラスの各パーツカラーを選ぶ。</p>															  									<img class="triple-photo" src="/oce/images/design_custom-landing2.jpg?mtime=20151221135340">																						</div>										<div class="col-md-4 step wow fadeInUp" data-wow-delay="400ms" data-wow-duration="1s" data-wow-offset="20">												<img class="stepimg" width="35%" src="/oce/images/step3.gif" /><br>												<h4>レンズに刻印する文字を入力</h4>						<p>レンズに刻印（エッチング）するテキストを入力する。</p>															  									<img class="triple-photo" src="/oce/images/MLB-custom-etch.jpg?mtime=20151221135821">																						</div>				</div>								</div>		</div>	</div></section>          <!--	ページ　インフォメーション    background-image: url('/oce/images/jawbreaker-feature.jpg')変更で画像変更-->  <section id="banners-feature" class="wrapper-outer flush">	<div class="wrapper-inner">	    <div class="container-fluid">		    <div class="row no-gutters">				<div class="col-sm-12 col-md-6 col-lg-6">					<div class="banners-feature-image" style=" background-image: url('/oce/images/frogskinsIS-feature.jpg'); background-size: cover; background-repeat: no-repeat;">					</div>				</div>					<div class="col-sm-12 col-md-6 col-lg-6 banners-feature-content">					<div class="flex-container">						<div class="flex-content">							<h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>[metatags_descriptionx]							                                                              <a class="btn btn-secondary" href="http://jp.oakley.com/ja/custom/sunglasses/custom-lifestyle-sunglasses/custom-frogskins/custom-product/OCP-9013IS?cm_mmc=www2-_-customlp-_-content-_-main-frogskins" role="button" onClick="javascript:ga('send', 'event', 'CUSTOMLP-TOP', 'CONTENT', 'main-jawbreaker');">﻿FROGSKINSをカスタマイズ <i class="fa fa-long-arrow-right" aria-hidden="true"></i></a>                              						</div>					</div>				</div>        	</div>	 	</div>	</div></section>                  <!--	ページ　ラインナップ    background-image: url('/oce/images/jawbreaker-feature.jpg')変更で画像変更-->  <section id="product-toggle">	<div class="wrapper-outer">		<div class="wrapper-inner">			<div class="row product-container container-fluid">											<div class="product-intro" id="lineup">					<h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>				</div>																<div id="Sport" class="products">									                    <!--                        ページ　ラインナップ                        <img src="/oce/images/icon-jawbreaker.jpg" alt="JAWBREAKER">変更で画像変更                    -->                                          <div class="col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-0 col-md-3 wow fadeInUp" data-wow-delay="30ms" data-wow-duration="1s" data-wow-offset="100">                        <div class="product" style="border: 1px solid #ddd">                            <h4>JAWBREAKER</h4>                            <p></p>                            <img src="/oce/images/icon-jawbreaker.jpg" alt="JAWBREAKER">							<div class="onebtn">                            [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]                            </div>                                                    </div>                    </div>					<!--                        ページ　ラインナップ                        <img src="/oce/images/icon-jawbreaker.jpg" alt="JAWBREAKER">変更で画像変更                    -->                  	                    <div class="col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-0 col-md-3 wow fadeInUp" data-wow-delay="200ms" data-wow-duration="1s" data-wow-offset="100">                        <div class="product" style="border: 1px solid #ddd">                            <h4>RADARLOCK</h4>                            <p></p>                            <img src="/oce/images/icon-radarlock.jpg" alt="RADARLOCK">							<div class="onebtn">                            [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]							</div>                        </div>                    </div>                                      	<!--                    <div class="col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-0 col-md-3 wow fadeInUp" data-wow-delay="400ms" data-wow-duration="1s" data-wow-offset="100">                        <div class="product" style="border: 1px solid #ddd">                            <h4>RACING JACKET</h4>                            <p></p>                            <img src="/oce/images/icon-racingjacket.jpg" alt="RACING JACKET">							<div class="onebtn">                            [hrefx]							</div>                        </div>                    </div>					-->					                    <!--                        ページ　ラインナップ                        <img src="/oce/images/icon-jawbreaker.jpg" alt="JAWBREAKER">変更で画像変更                    -->                                          <div class="col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-0 col-md-3 wow fadeInUp" data-wow-delay="600ms" data-wow-duration="1s" data-wow-offset="100">                        <div class="product" style="border: 1px solid #ddd">                            <h4>HALF JACKET 2.0</h4>                            <p></p>                            <img src="/oce/images/icon-half2.jpg" alt="HALF JACKET2.0">							<div class="onebtn">                            [hrefx][hrefx][hrefx][hrefx][hrefx]							</div>                        </div>                    </div>                    					<!--                        ページ　ラインナップ                        <img src="/oce/images/icon-jawbreaker.jpg" alt="JAWBREAKER">変更で画像変更                    -->  				    <!--                    <div class="col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-0 col-md-3 wow fadeInUp" data-wow-delay="30ms" data-wow-duration="1s" data-wow-offset="100">                        <div class="product" style="border: 1px solid #ddd">                            <h4>FAST JACKET</h4>                            <p></p>                            <img src="/oce/images/icon-fastjacket.jpg" alt="FAST JACKET">							<div class="onebtn">                            [hrefx]							</div>                        </div>                    </div>                    -->                    <!--                        ページ　ラインナップ                        <img src="/oce/images/icon-jawbreaker.jpg" alt="JAWBREAKER">変更で画像変更                    -->                      <!--                    <div class="col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-0 col-md-3 wow fadeInUp" data-wow-delay="200ms" data-wow-duration="1s" data-wow-offset="100">                        <div class="product" style="border: 1px solid #ddd">                            <h4>RADAR</h4>                            <p></p>                            <img src="/oce/images/icon-radar.jpg" alt="RADAR">							<div class="onebtn">                            [hrefx]							</div>                        </div>                    </div> -->					<!--                        ページ　ラインナップ                        <img src="/oce/images/icon-jawbreaker.jpg" alt="JAWBREAKER">変更で画像変更                    -->                      <!--                    <div class="col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-0 col-md-3 wow fadeInUp" data-wow-delay="400ms" data-wow-duration="1s" data-wow-offset="100">                        <div class="product" style="border: 1px solid #ddd">                            <h4>FLAK JACKET</h4>                            <p></p>                            <img src="/oce/images/icon-flakjacket.jpg" alt="FLAK JACKET">							<div class="onebtn">                            [hrefx]							</div>                        </div>                    </div> -->					<!--                        ページ　ラインナップ                        <img src="/oce/images/icon-jawbreaker.jpg" alt="JAWBREAKER">変更で画像変更                    -->                      <!--Frogskins                    <div class="col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-0 col-md-3 wow fadeInUp" data-wow-delay="600ms" data-wow-duration="1s" data-wow-offset="100">                        <div class="product" style="border: 1px solid #ddd">                            <h4>FROGSKINS</h4>                            <p></p>                            <img src="/oce/images/icon-frogskins.jpg" alt="FROGSKINS">							<div class="onebtn">                            [hrefx]							</div>                        </div>                    </div>-->				<div class="clear"></div><!--<div class="info-sm-12 info-feature-content">					<h3>[H3]</h3>							<p>﻿2016年8月のご注文より,アメリカ国内での製造となります。通常、オンラインストアではご注文確定後から10～12営業日での発送となります。<br>（2016年7月以前に承ったご注文につきましても、商品の在庫状況によりアメリカ国内での製造になる場合もございます。）<br>﻿また、輸送の状況などにより、商品発送までに上記営業日以上のお時間をいただく場合がございます。</p>							<p>﻿その際は、お客様にメールにてご連絡を差し上げますのであしからずご了承ください。</p>				</div><br>  -->              <div class="info-sm-12 info-feature-content">					<h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>							<p>オークリーカスタムアイウェアは客注商品のため、ご注文完了後のお客様のご都合による内容の変更、ならびにキャンセルはお受けすることができません。<br>特にレンズの刻印内容については十分にご検討の上、ご注文を賜われますようお願いいたします。</p>							<p>商品ページをご覧頂いた際にパソコン・モバイル端末のディスプレイ環境によって、商品の色味が実物とは異なって見える場合がございますので、予めご了承下さい。</p>				</div>                								</div>																									 										</div>                       		</div>                                	</div>        </section>    <!-- Footer Include Here --><footer class="wrapper-outer" id="switcher">  <div class="wrapper-inner">    <div class="container-fluid">      <div class="row">          <div class="col-md-6" style="display:none;">                                            <form class="form-inline">              <div class="form-group">              <img src="/assets-amp/images/blank.png" class="flag flag-lg flag-jp" alt="" />              <div class="form-wrap">                <select class="form-control" id="regions">                  <optgroup>                    <option value="" disabled default>Country</option>                  </optgroup>                  <optgroup>                                       <option value="ca" >Canada</option>                                       <option value="us" selected="selected">United States</option>                                       <option value="br" >Brasil (Brazil)</option>                                       <option value="au" >Australia</option>                                       <option value="cn" >China</option>                                       <option value="in" >India</option>                                       <option value="id" >Indonesia</option>                                       <option value="jp" >Japan</option>                                       <option value="be" >Belgie (Belgium)</option>                                       <option value="dk" >Danmark (Denmark)</option>                                       <option value="de" >Deutschland (Germany)</option>                                       <option value="es" >España (Spain)</option>                                       <option value="fr" >France</option>                                       <option value="ie" >Ireland</option>                                       <option value="it" >Italia (Italy)</option>                                       <option value="lu" >Luxembourg</option>                                       <option value="nl" >Nederland (Netherlands)</option>                                       <option value="no" >Norge (Norway)</option>                                       <option value="at" >Osterreich (Austria)</option>                                       <option value="pl" >Polska (Poland)</option>                                       <option value="pt" >Portugal</option>                                       <option value="ch" >Schweiz | Suisse | Svizzera</option>                                       <option value="se" >Sveirge (Sweden)</option>                                       <option value="uk" >United Kingdom</option>                                    </optgroup>                </select>              </div>              </div>              <div class="form-group">                <div class="form-wrap">                  <select class="form-control" id="languages">                    <optgroup>                      <option value="" disabled default>Language</option>                      <!-- <option>Country</option> -->                    </optgroup>                    <optgroup>                                                <option value="en" data-href="/en/shop/custom" selected="1" class="selected">English</option>                                          </optgroup>                  </select>                </div>              </div>            </form>        </div>        <div class="col-md-12">          <p>Copyright &copy; 2016 Oakley, Inc. All Rights Reserved</p>        </div>      </div>    </div>  </div></footer></div><!-- End #site-container --><div id="cart-drawer">  <div class="container-fluid flush">    <div class="row">      <div class="cart-title">      </div>      <div class="cart-wrapper">      </div>    </div>  </div></div></body></html>