<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"> <head>   <meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>   <meta name="description" content="[metatags_description]" />   <meta name="keywords" content="[metatags_keywords] " />   <meta name="format-detection" content=" [metatags_description] " />   <meta name="TopTitle" content="[metatags_title] " />   <meta http-equiv="X-UA-Compatible" content="IE=edge" />   <title>[metatags_title]</title>  </head>  <body class="post-template-default single single-post postid-2795 single-format-standard not-front-page">   <!--キャッシュ template_badge_noframe-->   <!--/キャッシュ template_badge_noframe-->   <div style="position:relative">    <link rel="alternate" type="application/rss+xml" title="山とカメラと僕の覚書 RSS Feed" href="http://yama10camera.com/feed/" />    <link rel="pingback" href="http://yama10camera.com/xmlrpc.php" />    <link rel="dns-prefetch" href="//s0.wp.com" />    <link rel="dns-prefetch" href="//s.gravatar.com" />    <link rel="dns-prefetch" href="//ajax.googleapis.com" />    <link rel="dns-prefetch" href="//fonts.googleapis.com" />    <link rel="dns-prefetch" href="//s.w.org" />    <link rel="stylesheet" id="contact-form-7-css" href="http://yama10camera.com/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=4.8" type="text/css" media="all" />    <link rel="stylesheet" id="Pz-HatenaBlogCard-css" href="http://yama10camera.com/wp-content/uploads/pz-hatenablogcard/style.css?ver=4.8" type="text/css" media="all" />    <link rel="stylesheet" id="toc-screen-css" href="http://yama10camera.com/wp-content/plugins/table-of-contents-plus/screen.min.css?ver=1509" type="text/css" media="all" />    <link rel="stylesheet" id="parent-style-css" href="http://yama10camera.com/wp-content/themes/affinger4/style.css?ver=4.8" type="text/css" media="all" />    <link rel="stylesheet" id="fonts-googleapis-montserrat-css" href="https://fonts.googleapis.com/css?family=Montserrat%3A400&amp;ver=4.8" type="text/css" media="all" />    <link rel="stylesheet" id="normalize-css" href="http://yama10camera.com/wp-content/themes/affinger4/css/normalize.css?ver=1.5.9" type="text/css" media="all" />    <link rel="stylesheet" id="font-awesome-css" href="http://yama10camera.com/wp-content/themes/affinger4/css/fontawesome/css/font-awesome.min.css?ver=4.5.0" type="text/css" media="all" />    <link rel="stylesheet" id="style-css" href="http://yama10camera.com/wp-content/themes/affinger4-cardchild/style.css?ver=4.8" type="text/css" media="all" />    <link rel="stylesheet" id="single2-css" href="http://yama10camera.com/wp-content/themes/affinger4/st-kanricss.php" type="text/css" media="all" />    <link rel="stylesheet" id="single-css" href="http://yama10camera.com/wp-content/themes/affinger4/st-rankcss.php" type="text/css" media="all" />    <link rel="stylesheet" id="wordpress-popular-posts-css" href="http://yama10camera.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.3.4" type="text/css" media="all" />    <link rel="stylesheet" id="amazonjs-css" href="http://yama10camera.com/wp-content/plugins/amazonjs/css/amazonjs.css?ver=0.8" type="text/css" media="all" />    <link rel="stylesheet" id="tablepress-default-css" href="http://yama10camera.com/wp-content/plugins/tablepress/css/default.min.css?ver=1.8" type="text/css" media="all" />    <link rel="stylesheet" id="st-themecss-css" href="http://yama10camera.com/wp-content/themes/affinger4/st-themecss-loader.php?ver=4.8" type="text/css" media="all" />    <link rel="stylesheet" id="social-logos-css" href="http://yama10camera.com/wp-content/plugins/jetpack/_inc/social-logos/social-logos.min.css?ver=1" type="text/css" media="all" />    <link rel="stylesheet" id="jetpack_css-css" href="http://yama10camera.com/wp-content/plugins/jetpack/css/jetpack.css?ver=5.0" type="text/css" media="all" />    <link rel="https://api.w.org/" href="http://yama10camera.com/wp-json/" />    <link rel="shortlink" href="http://wp.me/p6VVu0-J5" />    <link rel="alternate" type="application/json+oembed" href="http://yama10camera.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fyama10camera.com%2Fsportsday-camera%2F" />    <link rel="alternate" type="text/xml+oembed" href="http://yama10camera.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fyama10camera.com%2Fsportsday-camera%2F&amp;format=xml" />    <link rel="dns-prefetch" href="//v0.wordpress.com" />    <link rel="dns-prefetch" href="//i0.wp.com" />    <link rel="dns-prefetch" href="//i1.wp.com" />    <link rel="dns-prefetch" href="//i2.wp.com" />    <style type="text/css">[hrefx]</style>    <div id="st-ami">     <div id="wrapper" class="">      <div id="wrapper-in">       <header id="st-headwide">        <div id="headbox-bg">         <div class="clearfix" id="headbox">          <nav id="s-navi" class="pcnone">           <dl class="acordion">            <dt class="trigger">             <p><span class="op"><i class="fa fa-bars"></i></span></p>             <!-- 追加メニュー -->             <!-- 追加メニュー2 -->            </dt>            <dd class="acordion_tree">             <div class="menu">              <ul>               <li class="page_item page-item-124">[hrefx]</li>               <li class="page_item page-item-2">[hrefx]</li>              </ul>             </div>             <div class="clear"></div>            </dd>           </dl>          </nav>          <div id="header-l">           <!-- ロゴ又はブログ名 -->           <p class="sitename">[hrefx]</p>           <!-- ロゴ又はブログ名ここまで -->           <!-- キャプション -->           <p class="descr"> [metatags_title] </p>          </div>          <!-- /#header-l -->          <div id="header-r" class="smanone">          </div>          <!-- /#header-r -->         </div>         <!-- /#headbox-bg -->        </div>        <!-- /#headbox clearfix -->        <div id="gazou-wide">         <div id="st-menubox">          <div id="st-menuwide">           <nav class="smanone clearfix">            <ul id="menu-%e3%83%9b%e3%83%bc%e3%83%a0" class="menu">             <li id="menu-item-29" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-29">[hrefx]</li>             <li id="menu-item-26" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-26">[hrefx]              <ul class="sub-menu">               <li id="menu-item-107" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-107">[hrefx]</li>               <li id="menu-item-108" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-108">[hrefx]</li>              </ul> </li>             <li id="menu-item-27" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-has-children menu-item-27">[hrefx]              <ul class="sub-menu">               <li id="menu-item-109" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-109">[hrefx]</li>               <li id="menu-item-84" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-84">[hrefx]</li>              </ul> </li>             <li id="menu-item-4786" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-4786">[hrefx]</li>             <li id="menu-item-28" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-28">[hrefx]              <ul class="sub-menu">               <li id="menu-item-30" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-30">[hrefx]</li>              </ul> </li>             <li id="menu-item-34" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-34">[hrefx]</li>             <li id="menu-item-31" class="menu-item menu-item-type-post_type menu-item-object-page current-post-parent menu-item-31">[hrefx]</li>             <li id="menu-item-125" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-125">[hrefx]</li>            </ul>           </nav>          </div>         </div>        </div>       </header>       <div id="content-w">        <div id="content" class="clearfix">         <div id="contentInner">          <main>           <article>            <div id="post-2795" class="st-post post-2795 post type-post status-publish format-standard has-post-thumbnail hentry category-10 category-camera">             <div class="st-eyecatch">             </div>             <!--ぱんくず -->             <div id="breadcrumb">              <ol itemscope="" itemtype="http://schema.org/BreadcrumbList">               <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">[hrefx]                <meta itemprop="position" content="1" /></li>               <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">[hrefx]                <meta itemprop="position" content="2" /></li>               <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">[hrefx]                <meta itemprop="position" content="3" /></li>              </ol>             </div>             <!--/ ぱんくず -->             <!--ループ開始 -->             <p class="st-catgroup"> [hrefx] [hrefx] </p>             <h1 class="entry-title"> [metatags_title]</h1>             <div class="blogbox ">              <p><span class="kdate">[metatags_keywords]<time class="updated" datetime="2017-05-22T05:43:20+0900"></time> </span></p>             </div>             <div class="mainbox">              <div id="nocopy">               <!-- コピー禁止エリアここから -->               <div class="entry-content">                <div class="theContentWrap-ccc">                 <div id="toc_container" class="toc_white no_bullets">                  <p class="toc_title">[metatags_description]</p>                  <ul class="toc_list">                   <li>[hrefx]                    <ul>                     <li>[hrefx]</li>                     <li>[hrefx]</li>                     <li>[hrefx]</li>                     <li>[hrefx]</li>                    </ul></li>                   <li>[hrefx]                    <ul>                     <li>[hrefx]</li>                     <li>[hrefx]</li>                     <li>[hrefx]</li>                    </ul></li>                   <li>[hrefx]</li>                  </ul>                 </div>                 <div data-role="amazonjs" data-asin="B00N0E1O4E" data-locale="JP" data-tmpl="" data-img-size="" class="asin_B00N0E1O4E_JP_ amazonjs_item">                  <div class="amazonjs_indicator">                   <span class="amazonjs_indicator_img"></span> [hrefx]                   <span class="amazonjs_indicator_footer"></span>                  </div>                 </div>                 <div data-role="amazonjs" data-asin="B00CPLQYJS" data-locale="JP" data-tmpl="" data-img-size="" class="asin_B00CPLQYJS_JP_ amazonjs_item">                  <div class="amazonjs_indicator">                   <span class="amazonjs_indicator_img"></span> [hrefx]                   <span class="amazonjs_indicator_footer"></span>                  </div>                 </div>                 <div data-role="amazonjs" data-asin="B00EP71DZK" data-locale="JP" data-tmpl="" data-img-size="" class="asin_B00EP71DZK_JP_ amazonjs_item">                  <div class="amazonjs_indicator">                   <span class="amazonjs_indicator_img"></span> [hrefx]                   <span class="amazonjs_indicator_footer"></span>                  </div>                 </div>                 <div data-role="amazonjs" data-asin="B00TEY3686" data-locale="JP" data-tmpl="" data-img-size="" class="asin_B00TEY3686_JP_ amazonjs_item">                  <div class="amazonjs_indicator">                   <span class="amazonjs_indicator_img"></span> [hrefx]                   <span class="amazonjs_indicator_footer"></span>                  </div>                 </div>                 <div data-role="amazonjs" data-asin="B01ISP72N6" data-locale="JP" data-tmpl="" data-img-size="" class="asin_B01ISP72N6_JP_ amazonjs_item">                  <div class="amazonjs_indicator">                   <span class="amazonjs_indicator_img"></span> [hrefx]                   <span class="amazonjs_indicator_footer"></span>                  </div>                 </div>                 <div data-role="amazonjs" data-asin="B00S7LBK6W" data-locale="JP" data-tmpl="" data-img-size="" class="asin_B00S7LBK6W_JP_ amazonjs_item">                 </div>                </div>                <!-- コピー禁止エリアここまで -->                <div class="adbox">                 <div style="padding-top:10px;">                 </div>                </div>               </div>               <!-- .mainboxここまで -->               <div class="sns">                <ul class="clearfix">                 <!--ツイートボタン-->                 <!--Facebookボタン-->                 <!--Google+1ボタン-->                 <li class="googleplus"> [hrefx] </li>                 <!--ポケットボタン-->                 <!--はてブボタン-->                 <li class="hatebu"> [hrefx]                  <!-- script type="text/javascript" src="//b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script --> </li>                 <!--LINEボタン-->                </ul>               </div>               <p class="tagst"> <i class="fa fa-folder-open-o" aria-hidden="true"></i>-[hrefx], [hrefx]<br /> </p>               <aside>                <p class="author" style="display:none;">[hrefx]</p>                <!--ループ終了-->                <hr class="hrcss" />                <div class="ad">                 <h4 class="menu_underh2"> <b>[metatags_title]</b><br /> [description] </h4>                 <ul>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                 </ul>                </div>                <div class="ad">                 <h4 class="menu_underh2">[metatags_keywords]</h4>                 <ul>                  <li class="cat-item cat-item-4">[hrefx]                   <ul class="children">                    <li class="cat-item cat-item-5">[hrefx] </li>                   </ul> </li>                  <li class="cat-item cat-item-2">[hrefx]                   <ul class="children">                    <li class="cat-item cat-item-10">[hrefx] </li>                    <li class="cat-item cat-item-1">[hrefx] </li>                   </ul> </li>                  <li class="cat-item cat-item-7">[hrefx] </li>                  <li class="cat-item cat-item-42">[hrefx] </li>                  <li class="cat-item cat-item-3">[hrefx]                   <ul class="children">                    <li class="cat-item cat-item-9">[hrefx] </li>                    <li class="cat-item cat-item-8">[hrefx] </li>                   </ul> </li>                 </ul>                </div>                <div class="ad">                 <h4 class="menu_underh2">[metatags_title]</h4>                 <ul>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                  <li>[hrefx]</li>                 </ul>                </div>                <div id="scrollad">                 <!--ここにgoogleアドセンスコードを貼ると規約違反になるので注意して下さい-->                </div>               </aside>              </div>              <footer>               <p class="copyr" data-copyr="">[hrefx]</p>               <div id="page-top">                [hrefx]                <li><a href="http://www.cheapjerseys11.com/" target="_blank">cheap jerseys</a></li>               </div>               <!-- pcache202.search.ogk.yahoo.co.jp Mon Jul  3 10:19:42 JST 2017 -->              </footer>             </div>            </div>            </article>         </main>        </div>       </div>      </div>     </div>    </div>   </div>  </div> </body></html>